openapi: 3.1.0
info:
  title: FreshPlan Help & Support API
  version: 1.0.0
servers:
  - url: https://api.freshplan.example
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Persona:
      type: string
      enum: [CHEF, BUYER, GF, REP]
    HelpArticle:
      type: object
      required: [id, title, module, kind, locale, territory]
      properties:
        id: { type: string, format: uuid }
        slug: { type: string }
        module: { type: string, pattern: "^(01|02|03|04|05|06|07)$" }
        kind: { type: string, enum: [FAQ, HowTo, Playbook, Video] }
        title: { type: string }
        summary: { type: string }
        locale: { type: string }
        territory: { type: string }
        persona: { $ref: "#/components/schemas/Persona" }
        keywords: { type: array, items: { type: string } }
        cta:
          type: object
          properties:
            type: { type: string, enum: [NONE, LINK, GUIDED_FOLLOWUP, GUIDED_ROI] }
            href: { type: string }
    Suggestion:
      type: object
      required: [article, confidence]
      properties:
        article: { $ref: "#/components/schemas/HelpArticle" }
        confidence: { type: number, minimum: 0, maximum: 1 }
    FollowUpPlanRequest:
      type: object
      required: [accountId]
      properties:
        accountId: { type: string, format: uuid }
        contactRoles: { type: array, items: { $ref: "#/components/schemas/Persona" } }
        followupOffsets: { type: array, items: { type: string, pattern: "^P\d+[DWM]$" }, description: "ISO-8601 durations, e.g., P3D" }
        note: { type: string }
    FollowUpPlanResponse:
      type: object
      required: [createdActivities]
      properties:
        createdActivities:
          type: array
          items:
            type: object
            properties:
              id: { type: string, format: uuid }
              dueDate: { type: string, format: date-time }
              kind: { type: string }
    RoiQuickCheckRequest:
      type: object
      required: [accountId, hoursSavedPerDay, hourlyRate]
      properties:
        accountId: { type: string, format: uuid }
        hoursSavedPerDay: { type: number, minimum: 0 }
        hourlyRate: { type: number, minimum: 0 }
        workingDaysPerMonth: { type: number, default: 22 }
        wasteReductionPerMonth: { type: number, default: 0, description: "EUR" }
    RoiQuickCheckResponse:
      type: object
      required: [paybackMonths, monthlySavings]
      properties:
        paybackMonths: { type: number }
        monthlySavings: { type: number }
        usedCalculator: { type: string, enum: [INTERNAL, EXTERNAL] }
  responses:
    Problem:
      description: RFC7807 Problem
      content:
        application/problem+json:
          schema:
            type: object
            required: [type, title, status]
            properties:
              type: { type: string }
              title: { type: string }
              status: { type: integer }
              detail: { type: string }
paths:
  /api/help/menu:
    get:
      summary: Browseable help menu filtered by module/persona/territory.
      parameters:
        - in: query
          name: module
          schema: { type: string, pattern: "^(01|02|03|04|05|06|07)$" }
        - in: query
          name: persona
          schema: { $ref: "#/components/schemas/Persona" }
        - in: query
          name: territory
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/HelpArticle" }
        '403': { $ref: '#/components/responses/Problem' }
  /api/help/suggest:
    get:
      summary: Context-aware suggestions with CAR guardrails.
      parameters:
        - in: query
          name: context
          required: true
          schema: { type: string, description: "e.g., 03:sample:delivery" }
        - in: query
          name: module
          schema: { type: string, pattern: "^(01|02|03|04|05|06|07)$" }
        - in: query
          name: top
          schema: { type: integer, minimum: 1, maximum: 10, default: 3 }
        - in: header
          name: X-Session-Id
          schema: { type: string }
        - in: query
          name: sessionMinutes
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: OK
          headers:
            X-Nudge-Budget-Left:
              schema: { type: integer }
              description: Remaining nudges allowed for this session after this response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Suggestion" }
        '429': { $ref: '#/components/responses/Problem' }
  /api/help/feedback:
    post:
      summary: User feedback on suggestion/article.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, articleId]
              properties:
                type: { type: string, enum: [VIEW, USEFUL, NOT_USEFUL, NUDGE_DISMISSED] }
                articleId: { type: string, format: uuid }
                comment: { type: string }
                context: { type: string }
      responses:
        '204': { description: No Content }
  /api/help/guided/follow-up:
    post:
      summary: Create T+3/T+7 follow-up plan.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/FollowUpPlanRequest" }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/FollowUpPlanResponse" }
        '400': { $ref: '#/components/responses/Problem' }
        '403': { $ref: '#/components/responses/Problem' }
  /api/help/guided/roi-check:
    post:
      summary: Run quick ROI check and optionally create an activity.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RoiQuickCheckRequest" }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RoiQuickCheckResponse" }
        '400': { $ref: '#/components/responses/Problem' }
