static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains: ["*"]
              routes:
              - match: { prefix: "/api" }
                route: { cluster: backend }
          http_filters:
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(handle)
                  local method = handle:headers():get(":method")
                  local function is_write(m) return m=="POST" or m=="PUT" or m=="PATCH" or m=="DELETE" end
                  if is_write(method) then
                    local idem = handle:headers():get("Idempotency-Key")
                    if idem == nil or idem == "" then
                      handle:respond({[":status"]="400"}, '{"title":"Idempotency Key Required","status":400}')
                      return
                    end
                    if method=="PUT" or method=="PATCH" then
                      local ifm = handle:headers():get("If-Match")
                      if ifm == nil or ifm == "" then
                        handle:respond({[":status"]="428"}, '{"title":"Precondition Required","status":428}')
                        return
                      end
                    end
                  end
                  if handle:headers():get("X-Correlation-Id") == nil then
                    handle:headers():add("X-Correlation-Id", handle:streamInfo():downstreamAddress() .. "-" .. tostring(os.time()))
                  end
                end
          - name: envoy.filters.http.router
  clusters:
  - name: backend
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: backend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address: { address: backend, port_value: 8080 }
