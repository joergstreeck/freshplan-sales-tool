name: performance-gates

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  bundle-and-size:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
      - run: npm run build
      - run: npx size-limit
  k6-peak-tests:
    runs-on: ubuntu-latest
    needs: bundle-and-size
    steps:
      - uses: actions/checkout@v4
      - uses: grafana/k6-action@v0.2.0
        with:
          filename: ci/k6/peak-3x.js
        env:
          API: ${{ secrets.API_BASE }}
          TOKEN: ${{ secrets.K6_API_TOKEN }}
          CUSTOMER: ${{ secrets.K6_CUSTOMER_ID }}
      - uses: grafana/k6-action@v0.2.0
        with: { filename: ci/k6/peak-4x.js }
        env:
          API: ${{ secrets.API_BASE }}
          TOKEN: ${{ secrets.K6_API_TOKEN }}
          CUSTOMER: ${{ secrets.K6_CUSTOMER_ID }}
      - uses: grafana/k6-action@v0.2.0
        with: { filename: ci/k6/peak-5x.js }
        env:
          API: ${{ secrets.API_BASE }}
          TOKEN: ${{ secrets.K6_API_TOKEN }}
          CUSTOMER: ${{ secrets.K6_CUSTOMER_ID }}
  api-p95-gate:
    runs-on: ubuntu-latest
    needs: k6-peak-tests
    steps:
      - name: Query Prometheus for p95
        run: |
          curl -sG "$PROM_URL/api/v1/query" --data-urlencode 'query=histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket{route=~"/api/(customers|leads)"}[5m])) by (le))' > result.json
          P95=$(jq -r '.data.result[0].value[1]' result.json)
          echo "p95=$P95"
          awk -v p="$P95" 'BEGIN{exit (p<0.1)?0:1}'
        env:
          PROM_URL: ${{ secrets.PROMETHEUS_URL }}
