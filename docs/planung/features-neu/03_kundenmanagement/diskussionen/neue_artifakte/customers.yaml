openapi: 3.1.0
info: { title: Customers API (Module 03), version: 1.0.0, description: "B2B-Convenience-Food Kundenmanagement" }
servers: [ { url: https://api.example.com } ]
security: [ { bearerAuth: [] } ]
components:
  securitySchemes: { bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT } }
  schemas:
    CustomerType: { type: string, enum: [HOTEL, RESTAURANT, BETRIEBSGASTRONOMIE, CATERING] }
    CustomerItem:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        territory: { type: string }
        type: { $ref: '#/components/schemas/CustomerType' }
        contactabilityStatus: { type: string, enum: [OK, HARD_BOUNCE, SOFT_BOUNCE] }
        createdAt: { type: string, format: date-time }
    CustomerPage:
      type: object
      properties: { items: { type: array, items: { $ref: '#/components/schemas/CustomerItem' } }, nextCursor: { type: string, nullable: true } }
  responses:
    BadRequest: { $ref: './common-errors.yaml#/components/responses/BadRequest' }
    Forbidden:  { $ref: './common-errors.yaml#/components/responses/Forbidden' }
    Conflict:   { $ref: './common-errors.yaml#/components/responses/Conflict' }
    TooMany:    { $ref: './common-errors.yaml#/components/responses/TooMany' }
paths:
  /api/customers:
    get:
      summary: Kundenliste (ABAC Territory-Scoping, SmartFilter)
      parameters:
        - { name: q, in: query, schema: { type: string } }
        - { name: type, in: query, schema: { $ref: '#/components/schemas/CustomerType' } }
        - { name: territory, in: query, schema: { type: string } }
        - { name: limit, in: query, schema: { type: integer, default: 50 } }
        - { name: cursor, in: query, schema: { type: string } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/CustomerPage' } } } }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      summary: Neuen Kunden anlegen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, territory, type]
              properties:
                name: { type: string, maxLength: 200 }
                territory: { type: string, pattern: '^[A-Z]{2,5}$' }
                type: { $ref: '#/components/schemas/CustomerType' }
      responses:
        '201': { description: Created }
        '400': { $ref: '#/components/responses/BadRequest' }
  /api/customers/{id}:
    get:
      summary: Kunde Detail
      parameters: [ { name: id, in: path, required: true, schema: { type: string, format: uuid } } ]
      responses: { '200': { description: OK }, '404': { description: Not Found }, '403': { $ref: '#/components/responses/Forbidden' } }
  /api/customers/{id}/cookfresh/samples:
    get:
      summary: Cook&Fresh® Samples eines Kunden
      parameters: [ { name: id, in: path, required: true, schema: { type: string, format: uuid } } ]
      responses: { '200': { description: OK }, '403': { $ref: '#/components/responses/Forbidden' } }
    post:
      summary: Cook&Fresh® Sample anfordern
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items, deliveryDate]
              properties:
                items:
                  type: array
                  items: { type: object, required: [sku, quantity], properties: { sku: {type: string}, quantity: {type: integer, minimum: 1} } }
                deliveryDate: { type: string, format: date }
                notes: { type: string }
      responses: { '201': { description: Created }, '400': { $ref: '#/components/responses/BadRequest' }, '403': { $ref: '#/components/responses/Forbidden' } }
