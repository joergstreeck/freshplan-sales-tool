/**
 * Integration Tests
 * Test the interaction between different parts of the system
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { useStore } from '../store';
import EventBus from '../core/EventBus';
import StateManager from '../core/StateManager';
import CalculatorModule from '../modules/CalculatorModuleV2';
import FreshPlanApp from '../FreshPlanApp';
import { createTestModule } from '../test/helpers/TestModule';
import DOMHelperMock from '../test/mocks/DOMHelper.mock';

describe('Integration Tests', () => {
  describe('Store and Module Integration', () => {
    let calculator: CalculatorModule;

    beforeEach(async () => {
      // Reset store
      useStore.getState().reset();
      EventBus.clear();
      
      // Create calculator module with mocked DOM
      calculator = createTestModule(CalculatorModule);
      
      // Skip actual DOM binding
      calculator.bindEvents = vi.fn();
      calculator.subscribeToState = vi.fn();
      
      await calculator.init();
    });

    afterEach(async () => {
      await calculator.destroy();
    });

    it('should sync calculator module with store', () => {
      const store = useStore.getState();
      
      // Update via store
      store.setOrderValue(30000);
      store.setLeadTime(20);
      store.updateCalculation();
      
      // Check calculation
      const calculation = calculator.getCalculation();
      expect(calculation).toBeDefined();
      expect(calculation?.baseDiscount).toBe(8);
      expect(calculation?.earlyDiscount).toBe(2);
      expect(calculation?.totalDiscount).toBe(10);
    });

    it('should emit events when calculation changes', async () => {
      const callback = vi.fn();
      EventBus.on('module:calculator:calculated', callback);
      
      const store = useStore.getState();
      store.setOrderValue(50000);
      store.updateCalculation();
      
      // Wait for event propagation
      await new Promise(resolve => setTimeout(resolve, 0));
      
      expect(callback).toHaveBeenCalled();
      expect(callback.mock.calls[0][0]).toMatchObject({
        baseDiscount: 9,
        totalDiscount: expect.any(Number)
      });
    });
  });

  describe('App Integration', () => {
    let app: typeof FreshPlanApp;

    beforeEach(() => {
      // Get app instance
      app = FreshPlanApp;
    });

    afterEach(async () => {
      if (app && app.isInitialized()) {
        await app.destroy();
      }
    });

    it('should initialize app with modules', async () => {
      await app.init();
      
      expect(app.isInitialized()).toBe(true);
      
      // Check if calculator module is available
      const calculator = app.getModule('calculator');
      expect(calculator).toBeDefined();
      expect(calculator?.isInitialized()).toBe(true);
    });

    it('should handle module communication', async () => {
      await app.init();
      
      const eventCallback = vi.fn();
      EventBus.on('module:calculator:calculated', eventCallback);
      
      // Trigger calculation through store
      const store = useStore.getState();
      store.setOrderValue(25000);
      store.updateCalculation();
      
      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 10));
      
      expect(eventCallback).toHaveBeenCalled();
    });

    it('should persist state across app restart', async () => {
      await app.init();
      
      // Set some state
      const store = useStore.getState();
      store.setOrderValue(35000);
      store.setCustomerData({ companyName: 'Test GmbH' });
      
      // Destroy app
      await app.destroy();
      
      // Get app instance again (it's a singleton)
      const newApp = FreshPlanApp;
      await newApp.init();
      
      // Check if state was persisted
      const newStore = useStore.getState();
      expect(newStore.calculator.orderValue).toBe(35000);
      expect(newStore.customer.data?.companyName).toBe('Test GmbH');
      
      await newApp.destroy();
    });
  });

  describe('Event Flow', () => {
    it('should handle complex event chains', async () => {
      const events: string[] = [];
      
      // Set up event listeners
      EventBus.on('*', (data) => {
        const event = (data as any).type || 'unknown';
        if (event.includes('module:')) {
          events.push(event);
        }
      });
      
      // Initialize calculator
      const calculator = new CalculatorModule();
      await calculator.init();
      
      // Trigger calculation
      const store = useStore.getState();
      store.setOrderValue(40000);
      store.updateCalculation();
      
      // Wait for events
      await new Promise(resolve => setTimeout(resolve, 10));
      
      // Should have emitted initialization and calculation events
      expect(events).toContain('module:calculator:initialized');
      
      await calculator.destroy();
    });
  });

  describe('State Synchronization', () => {
    it('should sync state between legacy and new systems', () => {
      // StateManager is already imported at the top
      
      // Set via legacy API
      StateManager.set('calculator.orderValue', 60000);
      
      // Check in Zustand store
      const store = useStore.getState();
      expect(store.calculator.orderValue).toBe(60000);
      
      // Set via Zustand
      store.setLeadTime(25);
      
      // Check via legacy API
      expect(StateManager.get('calculator.leadTime')).toBe(25);
    });
  });

  describe('Notification System', () => {
    it('should handle notifications across modules', async () => {
      const store = useStore.getState();
      
      // Add notification
      store.addNotification({
        type: 'success',
        message: 'Test notification',
        duration: 100
      });
      
      expect(store.ui.notifications).toHaveLength(1);
      
      // Should auto-remove
      await new Promise(resolve => setTimeout(resolve, 150));
      
      expect(store.ui.notifications).toHaveLength(0);
    });
  });

  describe('Error Handling', () => {
    it('should handle errors gracefully', async () => {
      const errorCallback = vi.fn();
      EventBus.on('app:error', errorCallback);
      
      // Create a module that throws
      class ErrorModule extends (await import('@/core/Module')).default {
        async setup() {
          throw new Error('Module setup failed');
        }
      }
      
      const app = FreshPlanApp;
      const errorModule = createTestModule(ErrorModule, 'error');
      
      // Mock the setup to throw
      errorModule.setup = vi.fn().mockRejectedValue(new Error('Module setup failed'));
      
      // App should initialize despite module error
      await app.init();
      expect(app.isInitialized()).toBe(true);
      
      await app.destroy();
    });
  });

  describe('Performance', () => {
    it('should handle rapid state updates efficiently', () => {
      const startTime = performance.now();
      const store = useStore.getState();
      
      // Perform 1000 rapid updates
      for (let i = 0; i < 1000; i++) {
        store.setOrderValue(Math.random() * 100000);
        store.updateCalculation();
      }
      
      const endTime = performance.now();
      const duration = endTime - startTime;
      
      // Should complete in reasonable time (less than 500ms for CI environments)
      expect(duration).toBeLessThan(500);
      
      // Final state should be consistent
      expect(store.calculator.calculation).toBeDefined();
      expect(store.calculator.calculation?.totalDiscount).toBeGreaterThanOrEqual(0);
    });

    it('should debounce state persistence', async () => {
      vi.useFakeTimers();
      
      const store = useStore.getState();
      const saveSpy = vi.spyOn(Storage.prototype, 'setItem');
      
      // Multiple rapid updates
      for (let i = 0; i < 10; i++) {
        store.setOrderValue(i * 1000);
      }
      
      // Should not save immediately
      expect(saveSpy).not.toHaveBeenCalled();
      
      // Advance time to trigger debounced save
      vi.advanceTimersByTime(600);
      
      // Should save once
      expect(saveSpy).toHaveBeenCalledTimes(1);
      
      vi.useRealTimers();
    });
  });
});