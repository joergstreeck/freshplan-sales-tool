#!/bin/bash

# FreshPlan Automatische √Ñnderungs-Dokumentation
# Dokumentiert wichtige √Ñnderungen automatisch

echo "üìù Dokumentiere wichtige √Ñnderungen..."

CHANGELOG_DIR="docs/development/changelog"
TODAY=$(date +"%Y-%m-%d")
CHANGELOG_FILE="$CHANGELOG_DIR/$TODAY-changes.md"

# Erstelle Verzeichnis falls nicht vorhanden
mkdir -p $CHANGELOG_DIR

# Header f√ºr heutiges Changelog
cat > $CHANGELOG_FILE << EOF
# √Ñnderungen vom $TODAY

**Automatisch generiert um $(date +"%H:%M Uhr")**

## üöÄ Features
EOF

# Features aus Commits
git log --since="midnight" --pretty=format:"- %s" --grep="^feat" >> $CHANGELOG_FILE || echo "Keine neuen Features heute." >> $CHANGELOG_FILE

cat >> $CHANGELOG_FILE << EOF

## üêõ Fixes
EOF

# Fixes aus Commits
git log --since="midnight" --pretty=format:"- %s" --grep="^fix" >> $CHANGELOG_FILE || echo "Keine Fixes heute." >> $CHANGELOG_FILE

cat >> $CHANGELOG_FILE << EOF

## üîß Refactoring
EOF

# Refactoring aus Commits
git log --since="midnight" --pretty=format:"- %s" --grep="^refactor" >> $CHANGELOG_FILE || echo "Kein Refactoring heute." >> $CHANGELOG_FILE

cat >> $CHANGELOG_FILE << EOF

## üìä Ge√§nderte Dateien

### Backend
EOF

# Backend-√Ñnderungen
git diff --name-only HEAD~10..HEAD | grep "^backend/" | sed 's/^/- /' >> $CHANGELOG_FILE || echo "Keine Backend-√Ñnderungen." >> $CHANGELOG_FILE

cat >> $CHANGELOG_FILE << EOF

### Frontend
EOF

# Frontend-√Ñnderungen
git diff --name-only HEAD~10..HEAD | grep "^frontend/" | sed 's/^/- /' >> $CHANGELOG_FILE || echo "Keine Frontend-√Ñnderungen." >> $CHANGELOG_FILE

cat >> $CHANGELOG_FILE << EOF

### Dokumentation
EOF

# Dokumentations-√Ñnderungen
git diff --name-only HEAD~10..HEAD | grep "\.md$" | sed 's/^/- /' >> $CHANGELOG_FILE || echo "Keine Dokumentations-√Ñnderungen." >> $CHANGELOG_FILE

# Kritische √Ñnderungen erkennen
echo "" >> $CHANGELOG_FILE
echo "## ‚ö†Ô∏è Kritische √Ñnderungen" >> $CHANGELOG_FILE

# Suche nach Breaking Changes
git log --since="midnight" --pretty=format:"- %s" --grep="BREAKING" >> $CHANGELOG_FILE || echo "Keine Breaking Changes." >> $CHANGELOG_FILE

# Schema-√Ñnderungen
if git diff --name-only HEAD~10..HEAD | grep -q "migration"; then
    echo "- ‚ö†Ô∏è Datenbank-Schema ge√§ndert!" >> $CHANGELOG_FILE
fi

# API-√Ñnderungen
if git diff --name-only HEAD~10..HEAD | grep -q "API_CONTRACT\|api/"; then
    echo "- ‚ö†Ô∏è API-√Ñnderungen erkannt!" >> $CHANGELOG_FILE
fi

echo "" >> $CHANGELOG_FILE
echo "---" >> $CHANGELOG_FILE
echo "*Generiert von scripts/document-changes.sh*" >> $CHANGELOG_FILE

echo "‚úÖ √Ñnderungen dokumentiert in: $CHANGELOG_FILE"

# Optional: Wichtige √Ñnderungen in KNOWN_ISSUES.md eintragen
if grep -q "BREAKING\|kritisch" $CHANGELOG_FILE; then
    echo ""
    echo "‚ö†Ô∏è  Kritische √Ñnderungen erkannt! Bitte KNOWN_ISSUES.md manuell aktualisieren."
fi