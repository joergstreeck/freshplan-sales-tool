{
  "timestamp": "2025-07-25T21:53:36.302Z",
  "totalWarnings": 7,
  "totalErrors": 0,
  "maxWarnings": 15,
  "status": "PASS",
  "results": [
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/components/layout/SidebarNavigation.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has missing dependencies: 'expandedMenuId', 'setActiveMenu', and 'toggleSubmenu'. Either include them or remove the dependency array.",
          "line": 90,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 90,
          "endColumn": 25,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [expandedMenuId, location.pathname, setActiveMenu, toggleSubmenu]",
              "fix": {
                "range": [
                  3094,
                  3113
                ],
                "text": "[expandedMenuId, location.pathname, setActiveMenu, toggleSubmenu]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Box, Drawer, List, IconButton, Tooltip, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { useNavigationStore } from '@/store/navigationStore';\nimport { useAuthStore } from '@/store/authStore';\nimport { NavigationItem } from './NavigationItem';\nimport { navigationConfig } from '../../config/navigation.config';\nimport { useNavigationShortcuts } from '@/hooks/useNavigationShortcuts';\n\nconst DRAWER_WIDTH = 320; // Erhöht von 280px für bessere Textdarstellung\nconst DRAWER_WIDTH_COLLAPSED = 64;\n\nconst StyledDrawer = styled(Drawer, {\n  shouldForwardProp: (prop) => prop !== 'collapsed',\n})<{ collapsed: boolean }>(({ theme, collapsed }) => ({\n  width: collapsed ? DRAWER_WIDTH_COLLAPSED : DRAWER_WIDTH,\n  flexShrink: 0,\n  whiteSpace: 'nowrap',\n  boxSizing: 'border-box',\n  '& .MuiDrawer-paper': {\n    width: collapsed ? DRAWER_WIDTH_COLLAPSED : DRAWER_WIDTH,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    overflowX: 'hidden',\n    backgroundColor: '#FAFAFA', // Leicht grauer Hintergrund für besseren Kontrast\n    borderRight: '2px solid #94C456', // Freshfoodz Grün als Akzent\n    boxShadow: '2px 0 8px rgba(0, 0, 0, 0.05)',\n  },\n}));\n\nexport const SidebarNavigation: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { userPermissions } = useAuthStore();\n  const {\n    activeMenuId,\n    expandedMenuId,\n    isCollapsed,\n    setActiveMenu,\n    toggleSubmenu,\n    closeAllSubmenus,\n    toggleSidebar,\n    addToRecentlyVisited\n  } = useNavigationStore();\n\n  // Keyboard shortcuts\n  useNavigationShortcuts();\n\n  // Track visited pages\n  useEffect(() => {\n    addToRecentlyVisited(location.pathname);\n  }, [location.pathname, addToRecentlyVisited]);\n\n  // Auto-set active menu based on current URL\n  useEffect(() => {\n    const currentPath = location.pathname;\n    \n    // Find matching navigation item (including sub-items)\n    const matchingItem = navigationConfig.find(item => {\n      // Direct path match\n      if (currentPath.startsWith(item.path)) {\n        return true;\n      }\n      \n      // Sub-item path match\n      if (item.subItems) {\n        return item.subItems.some(subItem => currentPath.startsWith(subItem.path));\n      }\n      \n      return false;\n    });\n    \n    if (matchingItem) {\n      // Always set the active menu to ensure correct highlighting\n      setActiveMenu(matchingItem.id);\n      \n      // Check if we're on a sub-page\n      const isOnSubPage = matchingItem.subItems?.some(sub => currentPath.startsWith(sub.path));\n      \n      // Auto-expand submenu if on a sub-page and not already expanded\n      if (isOnSubPage && expandedMenuId !== matchingItem.id) {\n        toggleSubmenu(matchingItem.id);\n      }\n    }\n  }, [location.pathname]); // Remove dependencies to always update on path change\n\n  // Filter navigation items based on permissions\n  const visibleItems = navigationConfig.filter(item => \n    !item.permissions || item.permissions.some(p => userPermissions.includes(p))\n  );\n\n  return (\n    <StyledDrawer\n      variant=\"permanent\"\n      collapsed={isCollapsed}\n    >\n      <Box sx={{ \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'space-between',\n        p: 2,\n        minHeight: 64,\n        borderBottom: '1px solid rgba(148, 196, 86, 0.2)',\n      }}>\n        {!isCollapsed && (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Box\n              component=\"img\"\n              src=\"/freshfoodz-logo.svg\"\n              alt=\"FreshPlan\"\n              sx={{ height: 32 }}\n              onError={(e) => {\n                const target = e.target as HTMLImageElement;\n                target.style.display = 'none';\n              }}\n            />\n            <Typography\n              variant=\"h6\"\n              sx={{\n                color: '#004F7B',\n                fontFamily: 'Antonio, sans-serif',\n                fontWeight: 700,\n              }}\n            >\n              FreshPlan\n            </Typography>\n          </Box>\n        )}\n        <Tooltip title={isCollapsed ? \"Navigation erweitern\" : \"Navigation einklappen\"}>\n          <IconButton \n            onClick={toggleSidebar} \n            size=\"small\"\n            sx={{\n              color: '#94C456',\n              '&:hover': {\n                backgroundColor: 'rgba(148, 196, 86, 0.1)',\n              },\n            }}\n          >\n            {isCollapsed ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </Tooltip>\n      </Box>\n\n      <List component=\"nav\" sx={{ px: 1 }}>\n        {visibleItems.map((item) => (\n          <NavigationItem\n            key={item.id}\n            item={item}\n            isActive={activeMenuId === item.id}\n            isExpanded={expandedMenuId === item.id}\n            isCollapsed={isCollapsed}\n            onItemClick={() => {\n              setActiveMenu(item.id);\n              if (!item.subItems) {\n                // Navigate to the page and close any open submenus\n                navigate(item.path);\n                closeAllSubmenus();\n              } else {\n                toggleSubmenu(item.id);\n              }\n            }}\n            onSubItemClick={(subPath) => {\n              navigate(subPath);\n              setActiveMenu(item.id);\n            }}\n          />\n        ))}\n      </List>\n    </StyledDrawer>\n  );\n};",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/components/notifications/ToastProvider.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useCallback has a missing dependency: 'removeToast'. Either include it or remove the dependency array.",
          "line": 140,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 140,
          "endColumn": 8,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [removeToast]",
              "fix": {
                "range": [
                  3089,
                  3091
                ],
                "text": "[removeToast]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "/**\n * Enterprise Toast Notification System\n * \n * @module ToastProvider\n * @description Zentrales Toast-System für alle Benachrichtigungen im CRM.\n *              Unterstützt verschiedene Severity-Level, Auto-Dismiss und Actions.\n * @since 2.0.0\n * @author FreshPlan Team\n */\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport {\n  Alert,\n  AlertColor,\n  IconButton,\n  Box,\n  Typography,\n  Button\n} from '@mui/material';\nimport { Close as CloseIcon } from '@mui/icons-material';\n\n/**\n * Toast notification type\n */\nexport interface Toast {\n  id: string;\n  message: string;\n  title?: string;\n  severity: AlertColor;\n  duration?: number;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  persistent?: boolean;\n}\n\n/**\n * Toast context type\n */\ninterface ToastContextType {\n  addToast: (toast: Omit<Toast, 'id'>) => void;\n  removeToast: (id: string) => void;\n  clearAll: () => void;\n}\n\n/**\n * Toast context\n */\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\n/**\n * Hook to use toast notifications\n */\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\n/**\n * Enhanced toast hook with predefined methods\n */\nexport const useEnhancedToast = () => {\n  const { addToast, removeToast, clearAll } = useToast();\n\n  const showSuccess = useCallback((message: string, title?: string, action?: Toast['action']) => {\n    addToast({\n      message,\n      title,\n      severity: 'success',\n      duration: 4000,\n      action\n    });\n  }, [addToast]);\n\n  const showError = useCallback((message: string, title?: string, persistent = false) => {\n    addToast({\n      message,\n      title,\n      severity: 'error',\n      duration: persistent ? undefined : 6000,\n      persistent\n    });\n  }, [addToast]);\n\n  const showWarning = useCallback((message: string, title?: string, action?: Toast['action']) => {\n    addToast({\n      message,\n      title,\n      severity: 'warning',\n      duration: 5000,\n      action\n    });\n  }, [addToast]);\n\n  const showInfo = useCallback((message: string, title?: string, action?: Toast['action']) => {\n    addToast({\n      message,\n      title,\n      severity: 'info',\n      duration: 4000,\n      action\n    });\n  }, [addToast]);\n\n  return {\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    removeToast,\n    clearAll\n  };\n};\n\n/**\n * Toast provider component\n */\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const addToast = useCallback((toastData: Omit<Toast, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const toast: Toast = {\n      ...toastData,\n      id\n    };\n\n    setToasts(prev => [...prev, toast]);\n\n    // Auto-dismiss nach duration (falls nicht persistent)\n    if (!toast.persistent && toast.duration !== undefined) {\n      setTimeout(() => {\n        removeToast(id);\n      }, toast.duration);\n    }\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  const clearAll = useCallback(() => {\n    setToasts([]);\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ addToast, removeToast, clearAll }}>\n      {children}\n      \n      {/* Render all toasts in a container */}\n      <Box\n        sx={{\n          position: 'fixed',\n          top: 80,\n          right: 24,\n          zIndex: (theme) => theme.zIndex.snackbar,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        }}\n      >\n        {toasts.map((toast) => (\n          <Alert\n            key={toast.id}\n            severity={toast.severity}\n            variant=\"filled\"\n            onClose={() => removeToast(toast.id)}\n            action={\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                {toast.action && (\n                  <Button\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={toast.action.onClick}\n                    sx={{ mr: 1 }}\n                  >\n                    {toast.action.label}\n                  </Button>\n                )}\n                <IconButton\n                  size=\"small\"\n                  aria-label=\"close\"\n                  color=\"inherit\"\n                  onClick={() => removeToast(toast.id)}\n                >\n                  <CloseIcon fontSize=\"small\" />\n                </IconButton>\n              </Box>\n            }\n            sx={{\n              minWidth: 320,\n              maxWidth: 500,\n              boxShadow: 3,\n              '& .MuiAlert-message': {\n                width: '100%'\n              }\n            }}\n          >\n            {toast.title && (\n              <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\n                {toast.title}\n              </Typography>\n            )}\n            <Typography variant=\"body2\">\n              {toast.message}\n            </Typography>\n          </Alert>\n        ))}\n      </Box>\n    </ToastContext.Provider>\n  );\n};\n\n/**\n * Predefined toast notifications for common CRM actions\n */\nexport const CrmToasts = {\n  /**\n   * Stage change notifications\n   */\n  stageChanged: (stageName: string, opportunityName: string) => ({\n    title: 'Stage geändert',\n    message: `\"${opportunityName}\" wurde zu \"${stageName}\" verschoben.`,\n    severity: 'success' as AlertColor,\n    duration: 3000\n  }),\n\n  stageChangeFailed: (error: string) => ({\n    title: 'Stage-Wechsel fehlgeschlagen',\n    message: `Fehler beim Verschieben: ${error}`,\n    severity: 'error' as AlertColor,\n    duration: 5000\n  }),\n\n  /**\n   * Renewal notifications\n   */\n  renewalStarted: (customerName: string) => ({\n    title: 'Renewal-Prozess gestartet',\n    message: `Vertragsverlängerung für \"${customerName}\" wurde eingeleitet.`,\n    severity: 'info' as AlertColor,\n    duration: 4000,\n    action: {\n      label: 'Details',\n      onClick: () => {\n        // Navigate to renewal details\n        console.log('Navigate to renewal details');\n      }\n    }\n  }),\n\n  renewalCompleted: (customerName: string, isSuccessful: boolean) => ({\n    title: isSuccessful ? 'Renewal erfolgreich' : 'Renewal nicht erfolgreich',\n    message: isSuccessful \n      ? `Vertrag mit \"${customerName}\" wurde erfolgreich verlängert.`\n      : `Renewal mit \"${customerName}\" konnte nicht abgeschlossen werden.`,\n    severity: (isSuccessful ? 'success' : 'warning') as AlertColor,\n    duration: 5000\n  }),\n\n  /**\n   * Deal close notifications\n   */\n  dealWon: (opportunityName: string, value?: number) => ({\n    title: '🎉 Deal gewonnen!',\n    message: `\"${opportunityName}\" wurde erfolgreich abgeschlossen${value ? ` (€${value.toLocaleString()})` : ''}.`,\n    severity: 'success' as AlertColor,\n    duration: 6000,\n    action: {\n      label: 'Onboarding starten',\n      onClick: () => {\n        // Navigate to onboarding\n        console.log('Start onboarding process');\n      }\n    }\n  }),\n\n  dealLost: (opportunityName: string, reason?: string) => ({\n    title: 'Deal verloren',\n    message: `\"${opportunityName}\" wurde als verloren markiert${reason ? `: ${reason}` : ''}.`,\n    severity: 'warning' as AlertColor,\n    duration: 4000\n  }),\n\n  /**\n   * System notifications\n   */\n  autoSaved: () => ({\n    message: 'Änderungen automatisch gespeichert',\n    severity: 'info' as AlertColor,\n    duration: 2000\n  }),\n\n  syncError: (retryAction: () => void) => ({\n    title: 'Synchronisation fehlgeschlagen',\n    message: 'Verbindung zum Server unterbrochen. Versuchen Sie es erneut.',\n    severity: 'error' as AlertColor,\n    persistent: true,\n    action: {\n      label: 'Wiederholen',\n      onClick: retryAction\n    }\n  }),\n\n  /**\n   * Contract monitoring notifications\n   */\n  contractExpiring: (customerName: string, daysLeft: number) => ({\n    title: 'Vertrag läuft aus',\n    message: `Vertrag mit \"${customerName}\" läuft in ${daysLeft} Tagen aus.`,\n    severity: 'warning' as AlertColor,\n    duration: 6000,\n    action: {\n      label: 'Renewal starten',\n      onClick: () => {\n        // Start renewal process\n        console.log('Start renewal for', customerName);\n      }\n    }\n  })\n};\n\nexport default ToastProvider;",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/components/original/CalculatorLayout.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has a missing dependency: 'calculateDiscount'. Either include it or remove the dependency array.",
          "line": 33,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 33,
          "endColumn": 36,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [orderValue, leadTime, pickup, calculateDiscount]",
              "fix": {
                "range": [
                  1228,
                  1258
                ],
                "text": "[orderValue, leadTime, pickup, calculateDiscount]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { ReactNode, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLanguage } from '../../i18n/hooks';\nimport { formatCurrency } from '../../i18n/formatters';\nimport '../../styles/legacy/calculator.css';\nimport '../../styles/legacy/slider.css';\nimport '../../styles/legacy/calculator-components.css';\nimport '../../styles/legacy/calculator-layout.css';\nimport { CustomSlider } from './CustomSlider';\nimport { useCalculateDiscount } from '../../features/calculator/api/calculatorQueries';\n\ninterface CalculatorLayoutProps {\n  leftContent?: ReactNode;\n  rightContent?: ReactNode;\n}\n\nexport function CalculatorLayout({ leftContent, rightContent }: CalculatorLayoutProps) {\n  const { t } = useTranslation('calculator');\n  const { currentLanguage } = useLanguage();\n  const [orderValue, setOrderValue] = useState(15000);\n  const [leadTime, setLeadTime] = useState(14);\n  const [pickup, setPickup] = useState(false);\n  const calculateDiscount = useCalculateDiscount();\n\n  // Berechnung auslösen bei Änderungen\n  useEffect(() => {\n    calculateDiscount.mutate({\n      orderValue,\n      leadTime,\n      pickup,\n      chain: false, // TODO: Kettenkundenrabatt implementieren\n    });\n  }, [orderValue, leadTime, pickup]); // calculateDiscount.mutate ist stabil\n\n  // Handler für Beispielszenarien\n  const applyScenario = (\n    scenarioOrderValue: number,\n    scenarioLeadTime: number,\n    scenarioPickup: boolean\n  ) => {\n    setOrderValue(scenarioOrderValue);\n    setLeadTime(scenarioLeadTime);\n    setPickup(scenarioPickup);\n  };\n\n  // Ergebnisse aus der API\n  const result = calculateDiscount.data;\n  const baseDiscount = result?.baseDiscount || 0;\n  const earlyBooking = result?.earlyDiscount || 0;\n  const pickupDiscount = result?.pickupDiscount || 0;\n  const totalDiscount = result?.totalDiscount || 0;\n  const savings = result?.savingsAmount || 0;\n  const finalPrice = result?.finalPrice || orderValue;\n\n  return (\n    <div className=\"customer-container\">\n      <h2 className=\"section-title\">{t('title')}</h2>\n\n      <div className=\"demonstrator-container\">\n        {/* Linke Seite - Kalkulator */}\n        <div className=\"calculator-section\">\n          {leftContent || (\n            <div>\n              {/* Bestellwert Slider */}\n              <div className=\"form-group\">\n                <div className=\"slider-label-container\">\n                  <span id=\"orderValue-label\">{t('sliders.orderValue')}</span>\n                  <span className=\"slider-value-display\">\n                    {formatCurrency(orderValue, currentLanguage)}\n                  </span>\n                </div>\n                {/* Barrierefreier Custom Slider mit Radix UI */}\n                <CustomSlider\n                  value={orderValue}\n                  onValueChange={setOrderValue}\n                  min={1000}\n                  max={100000}\n                  step={1000}\n                  aria-label={t('sliders.orderValue')}\n                  aria-labelledby=\"orderValue-label\"\n                />\n              </div>\n\n              {/* Vorlaufzeit Slider */}\n              <div className=\"form-group\">\n                <div className=\"slider-label-container\">\n                  <span id=\"leadTime-label\">{t('sliders.leadTime')}</span>\n                  <span className=\"slider-value-display\">\n                    {t('sliders.leadTimeDays', { count: leadTime })}\n                  </span>\n                </div>\n                {/* Barrierefreier Custom Slider mit Radix UI */}\n                <CustomSlider\n                  value={leadTime}\n                  onValueChange={setLeadTime}\n                  min={1}\n                  max={50}\n                  step={1}\n                  aria-label={t('sliders.leadTime')}\n                  aria-labelledby=\"leadTime-label\"\n                />\n              </div>\n\n              {/* Abholung Checkbox */}\n              <div className=\"form-group checkbox-group\">\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    checked={pickup}\n                    onChange={e => setPickup(e.target.checked)}\n                  />\n                  <span>\n                    {t('checkboxes.pickup', { minValue: formatCurrency(5000, currentLanguage) })}\n                  </span>\n                </label>\n              </div>\n\n              {/* Results Container - Grauer Bereich */}\n              <div className=\"calculator-results-container\">\n                {/* Result Grid */}\n                <div className=\"calculator-result-grid\">\n                  <div className=\"calculator-result-item\">\n                    <span className=\"calculator-result-label\">{t('results.baseDiscount')}</span>\n                    <span className=\"calculator-result-value\">{baseDiscount}%</span>\n                  </div>\n                  <div className=\"calculator-result-item\">\n                    <span className=\"calculator-result-label\">{t('results.earlyBooking')}</span>\n                    <span className=\"calculator-result-value\">{earlyBooking}%</span>\n                  </div>\n                  <div className=\"calculator-result-item\">\n                    <span className=\"calculator-result-label\">{t('results.pickupDiscount')}</span>\n                    <span className=\"calculator-result-value\">{pickupDiscount}%</span>\n                  </div>\n                </div>\n\n                {/* Total Discount */}\n                <div className=\"total-discount\">\n                  <span>{t('results.totalDiscount')}</span>\n                  <span className=\"total-value\">{totalDiscount}%</span>\n                </div>\n\n                {/* Savings Display */}\n                <div className=\"savings-display\">\n                  <div className=\"savings-item\">\n                    <span>{t('results.savings')}</span>\n                    <span className=\"savings-value\">\n                      {formatCurrency(savings, currentLanguage)}\n                    </span>\n                  </div>\n                  <div className=\"savings-item highlight\">\n                    <span>{t('results.finalPrice')}</span>\n                    <span className=\"savings-value\">\n                      {formatCurrency(finalPrice, currentLanguage)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Maximaler Gesamtrabatt */}\n              <div className=\"max-discount-info\">{t('info.maxDiscount', { max: 15 })}</div>\n            </div>\n          )}\n        </div>\n\n        {/* Rechte Seite - Info */}\n        <div className=\"info-section\">\n          {rightContent || (\n            <>\n              {/* 1. Rabattsystem Details */}\n              <div className=\"info-card\">\n                <div className=\"rabattsystem-grid\">\n                  {/* Basisrabatt - 3 Spalten Tabelle */}\n                  <div>\n                    <h3>{t('results.baseDiscount')}</h3>\n                    <table className=\"rabatt-table\">\n                      <tbody>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab' : 'from'}</td>\n                          <td className=\"value-column\">{formatCurrency(5000, currentLanguage)}</td>\n                          <td className=\"percent-column\">3%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab' : 'from'}</td>\n                          <td className=\"value-column\">{formatCurrency(15000, currentLanguage)}</td>\n                          <td className=\"percent-column\">6%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab' : 'from'}</td>\n                          <td className=\"value-column\">{formatCurrency(30000, currentLanguage)}</td>\n                          <td className=\"percent-column\">8%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab' : 'from'}</td>\n                          <td className=\"value-column\">{formatCurrency(50000, currentLanguage)}</td>\n                          <td className=\"percent-column\">9%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab' : 'from'}</td>\n                          <td className=\"value-column\">{formatCurrency(75000, currentLanguage)}</td>\n                          <td className=\"percent-column\">10%</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  {/* Frühbucherrabatt - 2 Spalten Tabelle */}\n                  <div>\n                    <h3>{t('results.earlyBooking')}</h3>\n                    <table className=\"rabatt-table\">\n                      <tbody>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab 10 Tage' : 'from 10 days'}</td>\n                          <td className=\"percent-column\">1%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab 15 Tage' : 'from 15 days'}</td>\n                          <td className=\"percent-column\">2%</td>\n                        </tr>\n                        <tr>\n                          <td>{currentLanguage === 'de' ? 'ab 30 Tage' : 'from 30 days'}</td>\n                          <td className=\"percent-column\">3%</td>\n                        </tr>\n                        <tr>\n                          <td>&nbsp;</td>\n                          <td>&nbsp;</td>\n                        </tr>\n                        <tr>\n                          <td>{t('results.pickupDiscount')}</td>\n                          <td className=\"percent-column\">2%</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n\n              {/* 2. Kettenkundenregelung */}\n              <div className=\"info-card\">\n                <h3>\n                  {currentLanguage === 'de' ? 'Kettenkundenregelung' : 'Chain Customer Policy'}\n                </h3>\n                <p>\n                  {currentLanguage === 'de'\n                    ? 'Für Unternehmen mit mehreren Standorten (z.B. Hotel- oder Klinikgruppen):'\n                    : 'For companies with multiple locations (e.g. hotel or clinic groups):'}\n                </p>\n                <div className=\"option-container\">\n                  <div className=\"option-box\">\n                    <strong className=\"option-label\">\n                      {currentLanguage === 'de' ? 'Option A:' : 'Option A:'}\n                    </strong>{' '}\n                    <span className=\"option-text\">\n                      {currentLanguage === 'de'\n                        ? 'Bestellungen verschiedener Standorte innerhalb einer'\n                        : 'Orders from different locations within one'}\n                    </span>\n                    <div className=\"option-indent\">\n                      {currentLanguage === 'de'\n                        ? 'Woche werden zusammengerechnet'\n                        : 'week are combined'}\n                    </div>\n                  </div>\n                  <div className=\"option-box\">\n                    <strong className=\"option-label\">\n                      {currentLanguage === 'de' ? 'Option B:' : 'Option B:'}\n                    </strong>{' '}\n                    <span className=\"option-text\">\n                      {currentLanguage === 'de'\n                        ? 'Zentrale Bestellung mit Mehrfachauslieferung'\n                        : 'Central order with multiple deliveries'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* 3. Beispielszenarien */}\n              <div className=\"info-card gradient\">\n                <h3>{t('scenarios.title')}</h3>\n                <div className=\"scenario-grid\">\n                  {/* Hotelkette */}\n                  <div className=\"scenario-card\" onClick={() => applyScenario(35000, 21, true)}>\n                    <div className=\"scenario-header\">\n                      <span className=\"scenario-icon\">🏨</span>\n                      <strong className=\"scenario-title\">{t('scenarios.hotel')}</strong>\n                    </div>\n                    <div className=\"scenario-content\">\n                      <div className=\"scenario-details\">\n                        {formatCurrency(35000, currentLanguage)}\n                        <span className=\"separator\">•</span>\n                        21 {currentLanguage === 'de' ? 'Tage' : 'days'}\n                        <span className=\"separator\">•</span>\n                        {t('calculator.deliveryOptions.pickup')}\n                      </div>\n                      <div className=\"scenario-discount\">\n                        12% {currentLanguage === 'de' ? 'Rabatt' : 'discount'}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Klinikgruppe */}\n                  <div className=\"scenario-card\" onClick={() => applyScenario(65000, 30, false)}>\n                    <div className=\"scenario-header\">\n                      <span className=\"scenario-icon\">🏥</span>\n                      <strong className=\"scenario-title\">{t('scenarios.clinic')}</strong>\n                    </div>\n                    <div className=\"scenario-content\">\n                      <div className=\"scenario-details\">\n                        {formatCurrency(65000, currentLanguage)}\n                        <span className=\"separator\">•</span>\n                        30 {currentLanguage === 'de' ? 'Tage' : 'days'}\n                        <span className=\"separator\">•</span>\n                        {t('calculator.deliveryOptions.delivery')}\n                      </div>\n                      <div className=\"scenario-discount\">\n                        12% {currentLanguage === 'de' ? 'Rabatt' : 'discount'}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Restaurant */}\n                  <div className=\"scenario-card\" onClick={() => applyScenario(8500, 14, true)}>\n                    <div className=\"scenario-header\">\n                      <span className=\"scenario-icon\">🍽️</span>\n                      <strong className=\"scenario-title\">{t('scenarios.restaurant')}</strong>\n                    </div>\n                    <div className=\"scenario-content\">\n                      <div className=\"scenario-details\">\n                        {formatCurrency(8500, currentLanguage)}\n                        <span className=\"separator\">•</span>\n                        14 {currentLanguage === 'de' ? 'Tage' : 'days'}\n                        <span className=\"separator\">•</span>\n                        {t('calculator.deliveryOptions.pickup')}\n                      </div>\n                      <div className=\"scenario-discount\">\n                        6% {currentLanguage === 'de' ? 'Rabatt' : 'discount'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/components/original/LanguageSwitchLegacy.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has missing dependencies: 'currentLanguage' and 'onLanguageChange'. Either include them or remove the dependency array. If 'onLanguageChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
          "line": 22,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 22,
          "endColumn": 8,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [currentLanguage, onLanguageChange]",
              "fix": {
                "range": [
                  698,
                  700
                ],
                "text": "[currentLanguage, onLanguageChange]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { useLanguage } from '../../i18n/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { useEffect } from 'react';\n\ninterface LanguageSwitchLegacyProps {\n  onLanguageChange?: (lang: string) => void;\n}\n\nexport function LanguageSwitchLegacy({ onLanguageChange }: LanguageSwitchLegacyProps) {\n  const { currentLanguage, setLanguage } = useLanguage();\n  const { t } = useTranslation('navigation');\n\n  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newLang = e.target.value as 'de' | 'en';\n    setLanguage(newLang);\n    onLanguageChange?.(newLang);\n  };\n\n  // Sync initial language\n  useEffect(() => {\n    onLanguageChange?.(currentLanguage);\n  }, []);\n\n  return (\n    <select\n      id=\"languageSelect\"\n      className=\"header-select\"\n      value={currentLanguage}\n      onChange={handleLanguageChange}\n    >\n      <option value=\"de\">🇩🇪 {t('menu.german')}</option>\n      <option value=\"en\">🇬🇧 {t('menu.english')}</option>\n    </select>\n  );\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/components/original/LocationsForm.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has a missing dependency: 'calculateTotalLocations'. Either include it or remove the dependency array.",
          "line": 148,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 148,
          "endColumn": 40,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [calculateTotalLocations, formData, onTotalLocationsChange]",
              "fix": {
                "range": [
                  4103,
                  4137
                ],
                "text": "[calculateTotalLocations, formData, onTotalLocationsChange]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport '../../styles/legacy/forms.css';\nimport '../../styles/legacy/locations.css';\n\ninterface LocationsFormData {\n  totalLocations: number;\n  locationsManagementType: string;\n  detailedLocations: boolean;\n  vendingInterest: boolean;\n  vendingLocations: number;\n  vendingType: string;\n\n  // Industry specific counts\n  smallHotels?: number;\n  mediumHotels?: number;\n  largeHotels?: number;\n  hotelBreakfast?: number;\n  hotelRestaurant?: number;\n  hotelRoomService?: number;\n  hotelBanquet?: number;\n\n  smallClinics?: number;\n  mediumClinics?: number;\n  largeClinics?: number;\n  privatePatientShare?: number;\n  clinicPremiumMeals?: number;\n  clinicStaffCatering?: number;\n\n  smallSeniorResidences?: number;\n  mediumSeniorResidences?: number;\n  largeSeniorResidences?: number;\n  careLevel?: string;\n  seniorFullCatering?: number;\n  seniorPartialCatering?: number;\n  seniorSpecialDiet?: number;\n\n  smallRestaurants?: number;\n  mediumRestaurants?: number;\n  largeRestaurants?: number;\n  restaurantAlaCarte?: number;\n  restaurantBanquet?: number;\n\n  smallCafeterias?: number;\n  mediumCafeterias?: number;\n  largeCafeterias?: number;\n  cafeteriaBreakfast?: number;\n  cafeteriaLunch?: number;\n  cafeteriaDinner?: number;\n}\n\ninterface LocationsFormProps {\n  customerIndustry?: string;\n  onDetailedLocationsChange?: (enabled: boolean) => void;\n  onTotalLocationsChange?: (total: number) => void;\n}\n\nexport function LocationsForm({\n  customerIndustry = '',\n  onDetailedLocationsChange,\n  onTotalLocationsChange,\n}: LocationsFormProps) {\n  const { t } = useTranslation('locations');\n  const [formData, setFormData] = useState<LocationsFormData>({\n    totalLocations: 0,\n    locationsManagementType: 'zentral',\n    detailedLocations: false,\n    vendingInterest: false,\n    vendingLocations: 0,\n    vendingType: '',\n    privatePatientShare: 15,\n    careLevel: 'mixed',\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    const newValue =\n      type === 'checkbox'\n        ? (e.target as HTMLInputElement).checked\n        : type === 'number'\n          ? parseInt(value) || 0\n          : value;\n\n    setFormData(prev => ({\n      ...prev,\n      [name]: newValue,\n    }));\n\n    // Handle special cases\n    if (name === 'detailedLocations' && onDetailedLocationsChange) {\n      onDetailedLocationsChange(newValue as boolean);\n    }\n\n    if (name === 'vendingInterest') {\n      const vendingDetails = document.getElementById('vendingDetails');\n      if (vendingDetails) {\n        vendingDetails.style.display = newValue ? 'block' : 'none';\n      }\n    }\n  };\n\n  // Calculate total locations based on industry\n  const calculateTotalLocations = () => {\n    let total = 0;\n\n    switch (customerIndustry) {\n      case 'hotel':\n        total =\n          (formData.smallHotels || 0) + (formData.mediumHotels || 0) + (formData.largeHotels || 0);\n        break;\n      case 'krankenhaus':\n        total =\n          (formData.smallClinics || 0) +\n          (formData.mediumClinics || 0) +\n          (formData.largeClinics || 0);\n        break;\n      case 'seniorenresidenz':\n        total =\n          (formData.smallSeniorResidences || 0) +\n          (formData.mediumSeniorResidences || 0) +\n          (formData.largeSeniorResidences || 0);\n        break;\n      case 'restaurant':\n        total =\n          (formData.smallRestaurants || 0) +\n          (formData.mediumRestaurants || 0) +\n          (formData.largeRestaurants || 0);\n        break;\n      case 'betriebsrestaurant':\n        total =\n          (formData.smallCafeterias || 0) +\n          (formData.mediumCafeterias || 0) +\n          (formData.largeCafeterias || 0);\n        break;\n    }\n\n    return total;\n  };\n\n  useEffect(() => {\n    const total = calculateTotalLocations();\n    if (total !== formData.totalLocations) {\n      setFormData(prev => ({ ...prev, totalLocations: total }));\n      if (onTotalLocationsChange) {\n        onTotalLocationsChange(total);\n      }\n    }\n  }, [formData, onTotalLocationsChange]);\n\n  const renderIndustryFields = () => {\n    switch (customerIndustry) {\n      case 'hotel':\n        return (\n          <>\n            <h3 className=\"form-section-title\">{t('hotel.title')}</h3>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"smallHotels\">{t('hotel.small')}</label>\n                <input\n                  type=\"number\"\n                  id=\"smallHotels\"\n                  name=\"smallHotels\"\n                  min=\"0\"\n                  value={formData.smallHotels || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('hotel.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mediumHotels\">{t('hotel.medium')}</label>\n                <input\n                  type=\"number\"\n                  id=\"mediumHotels\"\n                  name=\"mediumHotels\"\n                  min=\"0\"\n                  value={formData.mediumHotels || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('hotel.placeholder')}\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"largeHotels\">{t('hotel.large')}</label>\n                <input\n                  type=\"number\"\n                  id=\"largeHotels\"\n                  name=\"largeHotels\"\n                  min=\"0\"\n                  value={formData.largeHotels || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('hotel.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\"></div>\n            </div>\n\n            <h4>{t('hotel.services')}</h4>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"hotelBreakfast\">{t('hotel.breakfast')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"hotelBreakfast\"\n                    name=\"hotelBreakfast\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.hotelBreakfast || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('hotel.of')} {calculateTotalLocations()} {t('hotel.hotels')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"hotelRestaurant\">{t('hotel.restaurant')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"hotelRestaurant\"\n                    name=\"hotelRestaurant\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.hotelRestaurant || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('hotel.of')} {calculateTotalLocations()} {t('hotel.hotels')}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"hotelRoomService\">{t('hotel.roomService')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"hotelRoomService\"\n                    name=\"hotelRoomService\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.hotelRoomService || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('hotel.of')} {calculateTotalLocations()} {t('hotel.hotels')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"hotelBanquet\">{t('hotel.banquet')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"hotelBanquet\"\n                    name=\"hotelBanquet\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.hotelBanquet || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('hotel.of')} {calculateTotalLocations()} {t('hotel.hotels')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </>\n        );\n\n      case 'krankenhaus':\n        return (\n          <>\n            <h3 className=\"form-section-title\">{t('clinic.title')}</h3>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"smallClinics\">{t('clinic.small')}</label>\n                <input\n                  type=\"number\"\n                  id=\"smallClinics\"\n                  name=\"smallClinics\"\n                  min=\"0\"\n                  value={formData.smallClinics || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('clinic.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mediumClinics\">{t('clinic.medium')}</label>\n                <input\n                  type=\"number\"\n                  id=\"mediumClinics\"\n                  name=\"mediumClinics\"\n                  min=\"0\"\n                  value={formData.mediumClinics || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('clinic.placeholder')}\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"largeClinics\">{t('clinic.large')}</label>\n                <input\n                  type=\"number\"\n                  id=\"largeClinics\"\n                  name=\"largeClinics\"\n                  min=\"0\"\n                  value={formData.largeClinics || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('clinic.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"privatePatientShare\">{t('clinic.privatePatients')}</label>\n                <div className=\"slider-container\">\n                  <input\n                    type=\"range\"\n                    id=\"privatePatientShare\"\n                    name=\"privatePatientShare\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={formData.privatePatientShare || 15}\n                    onChange={handleInputChange}\n                    className=\"slider-input\"\n                  />\n                  <span className=\"slider-value\">{formData.privatePatientShare || 15}%</span>\n                </div>\n              </div>\n            </div>\n            <h4>{t('clinic.services')}</h4>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"clinicPremiumMeals\">{t('clinic.patientCatering')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"clinicPremiumMeals\"\n                    name=\"clinicPremiumMeals\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.clinicPremiumMeals || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('clinic.of')} {calculateTotalLocations()} {t('clinic.clinics')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"clinicStaffCatering\">{t('clinic.staffCatering')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"clinicStaffCatering\"\n                    name=\"clinicStaffCatering\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.clinicStaffCatering || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('clinic.of')} {calculateTotalLocations()} {t('clinic.clinics')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </>\n        );\n\n      case 'seniorenresidenz':\n        return (\n          <>\n            <h3 className=\"form-section-title\">{t('seniorResidence.title')}</h3>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"smallSeniorResidences\">{t('seniorResidence.small')}</label>\n                <input\n                  type=\"number\"\n                  id=\"smallSeniorResidences\"\n                  name=\"smallSeniorResidences\"\n                  min=\"0\"\n                  value={formData.smallSeniorResidences || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('seniorResidence.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mediumSeniorResidences\">{t('seniorResidence.medium')}</label>\n                <input\n                  type=\"number\"\n                  id=\"mediumSeniorResidences\"\n                  name=\"mediumSeniorResidences\"\n                  min=\"0\"\n                  value={formData.mediumSeniorResidences || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('seniorResidence.placeholder')}\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"largeSeniorResidences\">{t('seniorResidence.large')}</label>\n                <input\n                  type=\"number\"\n                  id=\"largeSeniorResidences\"\n                  name=\"largeSeniorResidences\"\n                  min=\"0\"\n                  value={formData.largeSeniorResidences || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('seniorResidence.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"careLevel\">{t('seniorResidence.careLevel')}</label>\n                <select\n                  id=\"careLevel\"\n                  name=\"careLevel\"\n                  value={formData.careLevel}\n                  onChange={handleInputChange}\n                >\n                  <option value=\"mixed\">{t('seniorResidence.careLevels.mixed')}</option>\n                  <option value=\"assisted\">{t('seniorResidence.careLevels.assisted')}</option>\n                  <option value=\"nursing\">{t('seniorResidence.careLevels.nursing')}</option>\n                </select>\n              </div>\n            </div>\n            <h4>{t('seniorResidence.catering')}</h4>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"seniorFullCatering\">{t('seniorResidence.fullCatering')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"seniorFullCatering\"\n                    name=\"seniorFullCatering\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.seniorFullCatering || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('seniorResidence.of')} {calculateTotalLocations()}{' '}\n                    {t('seniorResidence.residences')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"seniorPartialCatering\">\n                  {t('seniorResidence.partialCatering')}\n                </label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"seniorPartialCatering\"\n                    name=\"seniorPartialCatering\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.seniorPartialCatering || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('seniorResidence.of')} {calculateTotalLocations()}{' '}\n                    {t('seniorResidence.residences')}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"seniorSpecialDiet\">{t('seniorResidence.specialDiet')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"seniorSpecialDiet\"\n                    name=\"seniorSpecialDiet\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.seniorSpecialDiet || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('seniorResidence.of')} {calculateTotalLocations()}{' '}\n                    {t('seniorResidence.residences')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\"></div>\n            </div>\n          </>\n        );\n\n      case 'restaurant':\n        return (\n          <>\n            <h3 className=\"form-section-title\">{t('restaurant.title')}</h3>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"smallRestaurants\">{t('restaurant.small')}</label>\n                <input\n                  type=\"number\"\n                  id=\"smallRestaurants\"\n                  name=\"smallRestaurants\"\n                  min=\"0\"\n                  value={formData.smallRestaurants || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('restaurant.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mediumRestaurants\">{t('restaurant.medium')}</label>\n                <input\n                  type=\"number\"\n                  id=\"mediumRestaurants\"\n                  name=\"mediumRestaurants\"\n                  min=\"0\"\n                  value={formData.mediumRestaurants || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('restaurant.placeholder')}\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"largeRestaurants\">{t('restaurant.large')}</label>\n                <input\n                  type=\"number\"\n                  id=\"largeRestaurants\"\n                  name=\"largeRestaurants\"\n                  min=\"0\"\n                  value={formData.largeRestaurants || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('restaurant.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\"></div>\n            </div>\n            <h4>{t('restaurant.services')}</h4>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"restaurantAlaCarte\">{t('restaurant.alaCarte')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"restaurantAlaCarte\"\n                    name=\"restaurantAlaCarte\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.restaurantAlaCarte || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('restaurant.of')} {calculateTotalLocations()} {t('restaurant.restaurants')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"restaurantBanquet\">{t('restaurant.banquet')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"restaurantBanquet\"\n                    name=\"restaurantBanquet\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.restaurantBanquet || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('restaurant.of')} {calculateTotalLocations()} {t('restaurant.restaurants')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </>\n        );\n\n      case 'betriebsrestaurant':\n        return (\n          <>\n            <h3 className=\"form-section-title\">{t('cafeteria.title')}</h3>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"smallCafeterias\">{t('cafeteria.small')}</label>\n                <input\n                  type=\"number\"\n                  id=\"smallCafeterias\"\n                  name=\"smallCafeterias\"\n                  min=\"0\"\n                  value={formData.smallCafeterias || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('cafeteria.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mediumCafeterias\">{t('cafeteria.medium')}</label>\n                <input\n                  type=\"number\"\n                  id=\"mediumCafeterias\"\n                  name=\"mediumCafeterias\"\n                  min=\"0\"\n                  value={formData.mediumCafeterias || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('cafeteria.placeholder')}\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"largeCafeterias\">{t('cafeteria.large')}</label>\n                <input\n                  type=\"number\"\n                  id=\"largeCafeterias\"\n                  name=\"largeCafeterias\"\n                  min=\"0\"\n                  value={formData.largeCafeterias || 0}\n                  onChange={handleInputChange}\n                  placeholder={t('cafeteria.placeholder')}\n                />\n              </div>\n              <div className=\"form-group\"></div>\n            </div>\n            <h4>{t('cafeteria.serviceScope')}</h4>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"cafeteriaBreakfast\">{t('cafeteria.breakfast')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"cafeteriaBreakfast\"\n                    name=\"cafeteriaBreakfast\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.cafeteriaBreakfast || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('cafeteria.of')} {calculateTotalLocations()} {t('cafeteria.locations')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"cafeteriaLunch\">{t('cafeteria.lunch')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"cafeteriaLunch\"\n                    name=\"cafeteriaLunch\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.cafeteriaLunch || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('cafeteria.of')} {calculateTotalLocations()} {t('cafeteria.locations')}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"cafeteriaDinner\">{t('cafeteria.dinner')}</label>\n                <div className=\"location-service-group\">\n                  <input\n                    type=\"number\"\n                    id=\"cafeteriaDinner\"\n                    name=\"cafeteriaDinner\"\n                    min=\"0\"\n                    max={calculateTotalLocations()}\n                    value={formData.cafeteriaDinner || 0}\n                    onChange={handleInputChange}\n                  />\n                  <span>\n                    {t('cafeteria.of')} {calculateTotalLocations()} {t('cafeteria.locations')}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form-group\"></div>\n            </div>\n          </>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"customer-container\">\n      <h2 className=\"section-title\">{t('title')}</h2>\n\n      <div className=\"customer-form\">\n        {/* Kettenübersicht */}\n        <div className=\"form-section\">\n          <h3 className=\"form-section-title\">{t('sections.overview')}</h3>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"totalLocations\">{t('fields.totalLocations')}</label>\n              <input\n                type=\"number\"\n                id=\"totalLocations\"\n                name=\"totalLocations\"\n                min=\"0\"\n                value={formData.totalLocations}\n                readOnly\n                className=\"readonly-input\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"locationsManagementType\">{t('fields.managementType')}</label>\n              <select\n                id=\"locationsManagementType\"\n                name=\"locationsManagementType\"\n                value={formData.locationsManagementType}\n                onChange={handleInputChange}\n              >\n                <option value=\"zentral\">{t('managementTypes.central')}</option>\n                <option value=\"dezentral\">{t('managementTypes.decentral')}</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Industry Specific Section */}\n        {customerIndustry && <div className=\"form-section\">{renderIndustryFields()}</div>}\n\n        {/* Detaillierte Erfassung */}\n        <div className=\"form-section\">\n          <h3 className=\"form-section-title\">{t('sections.detailed')}</h3>\n          <div className=\"form-row\">\n            <div className=\"form-group form-group-full\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  id=\"detailedLocations\"\n                  name=\"detailedLocations\"\n                  checked={formData.detailedLocations}\n                  onChange={handleInputChange}\n                  className=\"checkbox-input\"\n                />\n                <span className=\"checkbox-text\">{t('fields.detailedCapture')}</span>\n              </label>\n              <p className=\"help-text\">{t('fields.detailedHelpText')}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Vending-Konzept */}\n        <div className=\"form-section\">\n          <h3 className=\"form-section-title\">{t('sections.vending')}</h3>\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  id=\"vendingInterest\"\n                  name=\"vendingInterest\"\n                  checked={formData.vendingInterest}\n                  onChange={handleInputChange}\n                  className=\"checkbox-input\"\n                />\n                <span className=\"checkbox-text\">{t('fields.vendingInterest')}</span>\n              </label>\n            </div>\n          </div>\n          <div\n            id=\"vendingDetails\"\n            className={\n              formData.vendingInterest ? 'vending-details-visible' : 'vending-details-hidden'\n            }\n          >\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"vendingLocations\">{t('fields.vendingLocations')}</label>\n                <input\n                  type=\"number\"\n                  id=\"vendingLocations\"\n                  name=\"vendingLocations\"\n                  min=\"0\"\n                  value={formData.vendingLocations}\n                  onChange={handleInputChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"vendingType\">{t('fields.vendingType')}</label>\n                <select\n                  id=\"vendingType\"\n                  name=\"vendingType\"\n                  value={formData.vendingType}\n                  onChange={handleInputChange}\n                >\n                  <option value=\"\">{t('vendingTypes.placeholder')}</option>\n                  <option value=\"snack\">{t('vendingTypes.snack')}</option>\n                  <option value=\"fresh\">{t('vendingTypes.fresh')}</option>\n                  <option value=\"combi\">{t('vendingTypes.combi')}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/features/calculator/OriginalCalculator.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has a missing dependency: 'calculateMutation'. Either include it or remove the dependency array.",
          "line": 24,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 24,
          "endColumn": 43,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [orderValue, leadTime, pickup, chain, calculateMutation]",
              "fix": {
                "range": [
                  763,
                  800
                ],
                "text": "[orderValue, leadTime, pickup, chain, calculateMutation]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { useState, useEffect } from 'react';\nimport { useCalculateDiscount } from '../api/calculatorQueries';\nimport '../../../styles/legacy/calculator.css';\nimport '../../../styles/legacy/variables.css';\nimport '../../../styles/legacy/components.css';\n\n// Original Calculator Component - 1:1 Migration\nexport function OriginalCalculator() {\n  const [orderValue, setOrderValue] = useState(15000);\n  const [leadTime, setLeadTime] = useState(14);\n  const [pickup, setPickup] = useState(false);\n  const [chain, setChain] = useState(false);\n\n  const calculateMutation = useCalculateDiscount();\n\n  // Calculate on every change (like original)\n  useEffect(() => {\n    calculateMutation.mutate({\n      orderValue,\n      leadTime,\n      pickup,\n      chain,\n    });\n  }, [orderValue, leadTime, pickup, chain]);\n\n  const result = calculateMutation.data;\n\n  // Format currency like original\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  // Update slider progress (visual effect from original)\n  const updateSliderProgress = (value: number, min: number, max: number) => {\n    const percentage = ((value - min) / (max - min)) * 100;\n    return {\n      background: `linear-gradient(to right, #94c456 0%, #94c456 ${percentage}%, #e0e0e0 ${percentage}%, #e0e0e0 100%)`,\n    };\n  };\n\n  return (\n    <div className=\"demonstrator-container\">\n      {/* Calculator Section */}\n      <div className=\"calculator-section\">\n        <h2 className=\"section-title\">FreshPlan Rabattrechner</h2>\n\n        {/* Order Value Slider */}\n        <div className=\"slider-group\">\n          <div className=\"slider-label\">\n            <span>Bestellwert</span>\n            <span className=\"slider-value\">{formatCurrency(orderValue)}</span>\n          </div>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            min=\"1000\"\n            max=\"100000\"\n            step=\"1000\"\n            value={orderValue}\n            onChange={e => setOrderValue(Number(e.target.value))}\n            style={updateSliderProgress(orderValue, 1000, 100000)}\n          />\n        </div>\n\n        {/* Lead Time Slider */}\n        <div className=\"slider-group\">\n          <div className=\"slider-label\">\n            <span>Vorlaufzeit</span>\n            <span className=\"slider-value\">{leadTime} Tage</span>\n          </div>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            min=\"0\"\n            max=\"60\"\n            value={leadTime}\n            onChange={e => setLeadTime(Number(e.target.value))}\n            style={updateSliderProgress(leadTime, 0, 60)}\n          />\n        </div>\n\n        {/* Checkboxes */}\n        <div className=\"checkbox-group\">\n          <label className=\"checkbox-label\">\n            <input type=\"checkbox\" checked={pickup} onChange={e => setPickup(e.target.checked)} />\n            <span>Abholung (Mindestbestellwert: 5.000€ netto)</span>\n          </label>\n          <label className=\"checkbox-label\">\n            <input type=\"checkbox\" checked={chain} onChange={e => setChain(e.target.checked)} />\n            <span>Kettenkunde</span>\n          </label>\n        </div>\n\n        {/* Results - only show when we have data */}\n        {result && (\n          <div className=\"results-section\">\n            <h3>Ihre Rabatte:</h3>\n            <div className=\"discount-grid\">\n              <div className=\"discount-item\">\n                <span className=\"discount-label\">Basisrabatt:</span>\n                <span className=\"discount-value\">{result.baseDiscount}%</span>\n              </div>\n              <div className=\"discount-item\">\n                <span className=\"discount-label\">Frühbucher:</span>\n                <span className=\"discount-value\">+{result.earlyDiscount}%</span>\n              </div>\n              {result.pickupDiscount > 0 && (\n                <div className=\"discount-item\">\n                  <span className=\"discount-label\">Abholung:</span>\n                  <span className=\"discount-value\">+{result.pickupDiscount}%</span>\n                </div>\n              )}\n              <div className=\"discount-item total\">\n                <span className=\"discount-label\">Gesamtrabatt:</span>\n                <span className=\"discount-value accent\">{result.totalDiscount}%</span>\n              </div>\n            </div>\n\n            <div className=\"price-summary\">\n              <div className=\"price-row\">\n                <span>Ersparnis:</span>\n                <span className=\"savings\">{formatCurrency(result.savingsAmount)}</span>\n              </div>\n              <div className=\"price-row final\">\n                <span>Endpreis:</span>\n                <span className=\"final-price\">{formatCurrency(result.finalPrice)}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Right Column - Information */}\n      <div className=\"info-section\">\n        {/* Scenario Cards */}\n        <div className=\"info-card modern\">\n          <div className=\"info-header\">\n            <h3>Beispielszenarien</h3>\n          </div>\n          <div className=\"scenario-grid\">\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(8000);\n                setLeadTime(5);\n                setPickup(false);\n                setChain(false);\n              }}\n            >\n              <h4>Spontanbestellung</h4>\n              <p>Kurzfristige Bestellung mit geringem Volumen</p>\n              <div className=\"scenario-values\">\n                <span>8.000€ • 5 Tage</span>\n              </div>\n            </div>\n\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(32000);\n                setLeadTime(16);\n                setPickup(false);\n                setChain(false);\n              }}\n            >\n              <h4>Geplante Bestellung</h4>\n              <p>Mittelfristig geplante Standardbestellung</p>\n              <div className=\"scenario-values\">\n                <span>32.000€ • 16 Tage</span>\n              </div>\n            </div>\n\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(50000);\n                setLeadTime(30);\n                setPickup(true);\n                setChain(false);\n              }}\n            >\n              <h4>Optimale Konditionen</h4>\n              <p>Maximaler Rabatt durch Planung und Abholung</p>\n              <div className=\"scenario-values\">\n                <span>50.000€ • 30 Tage • Abholung</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Discount System Info */}\n        <div className=\"info-card modern\">\n          <div className=\"info-header\">\n            <h3>FreshPlan-Rabattsystem</h3>\n          </div>\n          <div className=\"discount-info\">\n            <div className=\"discount-tier\">\n              <h4>Mengenrabatt</h4>\n              <ul>\n                <li>ab 5.000€: 3%</li>\n                <li>ab 10.000€: 4%</li>\n                <li>ab 15.000€: 6%</li>\n                <li>ab 30.000€: 8%</li>\n                <li>ab 50.000€: 10%</li>\n              </ul>\n            </div>\n            <div className=\"discount-tier\">\n              <h4>Frühbucherrabatt</h4>\n              <ul>\n                <li>ab 14 Tage: +1%</li>\n                <li>ab 21 Tage: +2%</li>\n                <li>ab 30 Tage: +3%</li>\n              </ul>\n            </div>\n            <div className=\"discount-tier\">\n              <h4>Zusätzliche Rabatte</h4>\n              <ul>\n                <li>Abholung: +2%</li>\n                <li className=\"max-discount\">Maximaler Gesamtrabatt: 15%</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/joergstreeck/freshplan-sales-tool/frontend/src/features/calculator/components/OriginalCalculator.tsx",
      "messages": [
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 1,
          "message": "React Hook useEffect has a missing dependency: 'calculateMutation'. Either include it or remove the dependency array.",
          "line": 24,
          "column": 6,
          "nodeType": "ArrayExpression",
          "endLine": 24,
          "endColumn": 43,
          "suggestions": [
            {
              "desc": "Update the dependencies array to be: [orderValue, leadTime, pickup, chain, calculateMutation]",
              "fix": {
                "range": [
                  763,
                  800
                ],
                "text": "[orderValue, leadTime, pickup, chain, calculateMutation]"
              }
            }
          ]
        }
      ],
      "suppressedMessages": [],
      "errorCount": 0,
      "fatalErrorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { useState, useEffect } from 'react';\nimport { useCalculateDiscount } from '../api/calculatorQueries';\nimport '../../../styles/legacy/calculator.css';\nimport '../../../styles/legacy/variables.css';\nimport '../../../styles/legacy/components.css';\n\n// Original Calculator Component - 1:1 Migration\nexport function OriginalCalculator() {\n  const [orderValue, setOrderValue] = useState(15000);\n  const [leadTime, setLeadTime] = useState(14);\n  const [pickup, setPickup] = useState(false);\n  const [chain, setChain] = useState(false);\n\n  const calculateMutation = useCalculateDiscount();\n\n  // Calculate on every change (like original)\n  useEffect(() => {\n    calculateMutation.mutate({\n      orderValue,\n      leadTime,\n      pickup,\n      chain,\n    });\n  }, [orderValue, leadTime, pickup, chain]);\n\n  const result = calculateMutation.data;\n\n  // Format currency like original\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  // Update slider progress (visual effect from original)\n  const updateSliderProgress = (value: number, min: number, max: number) => {\n    const percentage = ((value - min) / (max - min)) * 100;\n    return {\n      background: `linear-gradient(to right, #94c456 0%, #94c456 ${percentage}%, #e0e0e0 ${percentage}%, #e0e0e0 100%)`,\n    };\n  };\n\n  return (\n    <div className=\"demonstrator-container\">\n      {/* Calculator Section */}\n      <div className=\"calculator-section\">\n        <h2 className=\"section-title\">FreshPlan Rabattrechner</h2>\n\n        {/* Order Value Slider */}\n        <div className=\"slider-group\">\n          <div className=\"slider-label\">\n            <span>Bestellwert</span>\n            <span className=\"slider-value\">{formatCurrency(orderValue)}</span>\n          </div>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            min=\"1000\"\n            max=\"100000\"\n            step=\"1000\"\n            value={orderValue}\n            onChange={e => setOrderValue(Number(e.target.value))}\n            style={updateSliderProgress(orderValue, 1000, 100000)}\n          />\n        </div>\n\n        {/* Lead Time Slider */}\n        <div className=\"slider-group\">\n          <div className=\"slider-label\">\n            <span>Vorlaufzeit</span>\n            <span className=\"slider-value\">{leadTime} Tage</span>\n          </div>\n          <input\n            type=\"range\"\n            className=\"slider\"\n            min=\"0\"\n            max=\"60\"\n            value={leadTime}\n            onChange={e => setLeadTime(Number(e.target.value))}\n            style={updateSliderProgress(leadTime, 0, 60)}\n          />\n        </div>\n\n        {/* Checkboxes */}\n        <div className=\"checkbox-group\">\n          <label className=\"checkbox-label\">\n            <input type=\"checkbox\" checked={pickup} onChange={e => setPickup(e.target.checked)} />\n            <span>Abholung (Mindestbestellwert: 5.000€ netto)</span>\n          </label>\n          <label className=\"checkbox-label\">\n            <input type=\"checkbox\" checked={chain} onChange={e => setChain(e.target.checked)} />\n            <span>Kettenkunde</span>\n          </label>\n        </div>\n\n        {/* Results - only show when we have data */}\n        {result && (\n          <div className=\"results-section\">\n            <h3>Ihre Rabatte:</h3>\n            <div className=\"discount-grid\">\n              <div className=\"discount-item\">\n                <span className=\"discount-label\">Basisrabatt:</span>\n                <span className=\"discount-value\">{result.baseDiscount}%</span>\n              </div>\n              <div className=\"discount-item\">\n                <span className=\"discount-label\">Frühbucher:</span>\n                <span className=\"discount-value\">+{result.earlyDiscount}%</span>\n              </div>\n              {result.pickupDiscount > 0 && (\n                <div className=\"discount-item\">\n                  <span className=\"discount-label\">Abholung:</span>\n                  <span className=\"discount-value\">+{result.pickupDiscount}%</span>\n                </div>\n              )}\n              <div className=\"discount-item total\">\n                <span className=\"discount-label\">Gesamtrabatt:</span>\n                <span className=\"discount-value accent\">{result.totalDiscount}%</span>\n              </div>\n            </div>\n\n            <div className=\"price-summary\">\n              <div className=\"price-row\">\n                <span>Ersparnis:</span>\n                <span className=\"savings\">{formatCurrency(result.savingsAmount)}</span>\n              </div>\n              <div className=\"price-row final\">\n                <span>Endpreis:</span>\n                <span className=\"final-price\">{formatCurrency(result.finalPrice)}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Right Column - Information */}\n      <div className=\"info-section\">\n        {/* Scenario Cards */}\n        <div className=\"info-card modern\">\n          <div className=\"info-header\">\n            <h3>Beispielszenarien</h3>\n          </div>\n          <div className=\"scenario-grid\">\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(8000);\n                setLeadTime(5);\n                setPickup(false);\n                setChain(false);\n              }}\n            >\n              <h4>Spontanbestellung</h4>\n              <p>Kurzfristige Bestellung mit geringem Volumen</p>\n              <div className=\"scenario-values\">\n                <span>8.000€ • 5 Tage</span>\n              </div>\n            </div>\n\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(32000);\n                setLeadTime(16);\n                setPickup(false);\n                setChain(false);\n              }}\n            >\n              <h4>Geplante Bestellung</h4>\n              <p>Mittelfristig geplante Standardbestellung</p>\n              <div className=\"scenario-values\">\n                <span>32.000€ • 16 Tage</span>\n              </div>\n            </div>\n\n            <div\n              className=\"scenario-card\"\n              onClick={() => {\n                setOrderValue(50000);\n                setLeadTime(30);\n                setPickup(true);\n                setChain(false);\n              }}\n            >\n              <h4>Optimale Konditionen</h4>\n              <p>Maximaler Rabatt durch Planung und Abholung</p>\n              <div className=\"scenario-values\">\n                <span>50.000€ • 30 Tage • Abholung</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Discount System Info */}\n        <div className=\"info-card modern\">\n          <div className=\"info-header\">\n            <h3>FreshPlan-Rabattsystem</h3>\n          </div>\n          <div className=\"discount-info\">\n            <div className=\"discount-tier\">\n              <h4>Mengenrabatt</h4>\n              <ul>\n                <li>ab 5.000€: 3%</li>\n                <li>ab 10.000€: 4%</li>\n                <li>ab 15.000€: 6%</li>\n                <li>ab 30.000€: 8%</li>\n                <li>ab 50.000€: 10%</li>\n              </ul>\n            </div>\n            <div className=\"discount-tier\">\n              <h4>Frühbucherrabatt</h4>\n              <ul>\n                <li>ab 14 Tage: +1%</li>\n                <li>ab 21 Tage: +2%</li>\n                <li>ab 30 Tage: +3%</li>\n              </ul>\n            </div>\n            <div className=\"discount-tier\">\n              <h4>Zusätzliche Rabatte</h4>\n              <ul>\n                <li>Abholung: +2%</li>\n                <li className=\"max-discount\">Maximaler Gesamtrabatt: 15%</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "usedDeprecatedRules": []
    }
  ]
}