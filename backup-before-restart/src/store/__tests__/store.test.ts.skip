/**
 * Zustand Store Tests
 */

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { renderHook, act } from '@testing-library/react';
import { useStore } from '../index';

describe('FreshPlan Store', () => {
  beforeEach(() => {
    // Reset store to initial state
    useStore.setState({
      calculator: {
        orderValue: 15000,
        leadTime: 14,
        pickup: false,
        chain: false,
        calculation: null
      }
    });
  });

  describe('Calculator State', () => {
    it('should have correct initial state', () => {
      const state = useStore.getState();
      
      expect(state.calculator.orderValue).toBe(15000);
      expect(state.calculator.leadTime).toBe(14);
      expect(state.calculator.pickup).toBe(false);
      expect(state.calculator.chain).toBe(false);
      expect(state.calculator.calculation).toBeNull();
    });

    it('should update order value', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setOrderValue(25000);
      });
      
      expect(result.current.calculator.orderValue).toBe(25000);
    });

    it('should calculate discounts correctly', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setOrderValue(50000);
        result.current.setLeadTime(30);
        result.current.setPickup(true);
        result.current.updateCalculation();
      });
      
      const calculation = result.current.calculator.calculation;
      expect(calculation).toBeDefined();
      expect(calculation?.baseDiscount).toBe(9); // 50000 EUR
      expect(calculation?.earlyDiscount).toBe(3); // 30 days
      expect(calculation?.pickupDiscount).toBe(2); // pickup true
      expect(calculation?.totalDiscount).toBe(14);
      expect(calculation?.discountAmount).toBe(7000);
      expect(calculation?.finalPrice).toBe(43000);
    });

    it('should not apply pickup discount for orders under 5000 EUR', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setOrderValue(4000);
        result.current.setPickup(true);
        result.current.updateCalculation();
      });
      
      const calculation = result.current.calculator.calculation;
      expect(calculation?.pickupDiscount).toBe(0);
    });

    it('should handle chain customers correctly (no extra discount)', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setChain(true);
        result.current.updateCalculation();
      });
      
      const calculation = result.current.calculator.calculation;
      expect(calculation?.chainDiscount).toBe(0);
    });
  });

  describe('Customer State', () => {
    it('should update customer data', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setCustomerData({
          companyName: 'Test GmbH',
          contactEmail: 'test@example.com'
        });
      });
      
      expect(result.current.customer.data?.companyName).toBe('Test GmbH');
      expect(result.current.customer.data?.contactEmail).toBe('test@example.com');
      expect(result.current.customer.isDirty).toBe(true);
    });

    it('should clear customer data', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setCustomerData({ companyName: 'Test GmbH' });
        result.current.clearCustomer();
      });
      
      expect(result.current.customer.data).toBeNull();
      expect(result.current.customer.isDirty).toBe(false);
    });

    it('should update customer type and industry', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setCustomerType('chain');
        result.current.setIndustry('hotel');
      });
      
      expect(result.current.customer.customerType).toBe('chain');
      expect(result.current.customer.industry).toBe('hotel');
    });
  });

  describe('UI State', () => {
    it('should manage notifications', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.addNotification({
          type: 'success',
          message: 'Test notification',
          duration: 3000
        });
      });
      
      expect(result.current.ui.notifications).toHaveLength(1);
      expect(result.current.ui.notifications[0].type).toBe('success');
      expect(result.current.ui.notifications[0].message).toBe('Test notification');
      expect(result.current.ui.notifications[0].id).toBeDefined();
    });

    it('should remove notifications', () => {
      const { result } = renderHook(() => useStore());
      
      let notificationId: string;
      
      act(() => {
        result.current.addNotification({
          type: 'error',
          message: 'Error message'
        });
        notificationId = result.current.ui.notifications[0].id;
      });
      
      act(() => {
        result.current.removeNotification(notificationId);
      });
      
      expect(result.current.ui.notifications).toHaveLength(0);
    });

    it('should auto-remove notifications after duration', async () => {
      vi.useFakeTimers();
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.addNotification({
          type: 'info',
          message: 'Auto remove',
          duration: 1000
        });
      });
      
      expect(result.current.ui.notifications).toHaveLength(1);
      
      act(() => {
        vi.advanceTimersByTime(1100);
      });
      
      expect(result.current.ui.notifications).toHaveLength(0);
      
      vi.useRealTimers();
    });

    it('should update loading state', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setLoading(true);
      });
      
      expect(result.current.ui.loading).toBe(true);
      
      act(() => {
        result.current.setLoading(false);
      });
      
      expect(result.current.ui.loading).toBe(false);
    });

    it('should handle errors', () => {
      const { result } = renderHook(() => useStore());
      
      const error = {
        message: 'Test error',
        code: 'TEST_ERROR'
      };
      
      act(() => {
        result.current.setError(error);
      });
      
      expect(result.current.ui.error).toEqual(error);
      
      act(() => {
        result.current.clearError();
      });
      
      expect(result.current.ui.error).toBeNull();
    });
  });

  describe('Settings State', () => {
    it('should update salesperson info', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.updateSalesperson({
          name: 'Max Mustermann',
          email: 'max@example.com',
          phone: '+49 123 456789'
        });
      });
      
      expect(result.current.settings.salesperson.name).toBe('Max Mustermann');
      expect(result.current.settings.salesperson.email).toBe('max@example.com');
      expect(result.current.settings.salesperson.phone).toBe('+49 123 456789');
    });

    it('should update integration settings', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.updateIntegration('monday', {
          token: 'test-token',
          boardId: 'test-board'
        });
      });
      
      expect(result.current.settings.integrations.monday.token).toBe('test-token');
      expect(result.current.settings.integrations.monday.boardId).toBe('test-board');
    });
  });

  describe('i18n State', () => {
    it('should change language', () => {
      const { result } = renderHook(() => useStore());
      
      act(() => {
        result.current.setLanguage('en');
      });
      
      expect(result.current.i18n.currentLanguage).toBe('en');
    });

    it('should toggle auto update', () => {
      const { result } = renderHook(() => useStore());
      
      const initialAutoUpdate = result.current.i18n.autoUpdate;
      
      act(() => {
        result.current.toggleAutoUpdate();
      });
      
      expect(result.current.i18n.autoUpdate).toBe(!initialAutoUpdate);
    });
  });

  describe('Global Actions', () => {
    it('should reset store to initial state', () => {
      const { result } = renderHook(() => useStore());
      
      // Make some changes
      act(() => {
        result.current.setOrderValue(99999);
        result.current.setCustomerData({ companyName: 'Test' });
        result.current.setLanguage('en');
      });
      
      // Reset
      act(() => {
        result.current.reset();
      });
      
      // Check initial values
      expect(result.current.calculator.orderValue).toBe(15000);
      expect(result.current.customer.data).toBeNull();
      expect(result.current.i18n.currentLanguage).toBe('de');
    });
  });

  describe('Subscriptions', () => {
    it('should notify subscribers on state changes', () => {
      const callback = vi.fn();
      
      // Subscribe to calculator changes
      const unsubscribe = useStore.subscribe(
        (state) => state.calculator.orderValue,
        callback
      );
      
      // Change state
      act(() => {
        useStore.getState().setOrderValue(30000);
      });
      
      expect(callback).toHaveBeenCalledWith(30000, 15000);
      
      // Cleanup
      unsubscribe();
    });
  });
});