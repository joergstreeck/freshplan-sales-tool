/**
 * DOMHelper Tests
 */

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { screen } from '@testing-library/dom';
import userEvent from '@testing-library/user-event';
import DOMHelper from '../DOMHelper';

describe('DOMHelper', () => {
  beforeEach(() => {
    // Reset DOM
    document.body.innerHTML = '';
  });

  describe('Element Selection', () => {
    it('should select single element', () => {
      document.body.innerHTML = '<div id="test">Hello</div>';
      
      const element = DOMHelper.$('#test');
      expect(element).toBeDefined();
      expect(element?.textContent).toBe('Hello');
    });

    it('should select multiple elements', () => {
      document.body.innerHTML = `
        <div class="item">One</div>
        <div class="item">Two</div>
        <div class="item">Three</div>
      `;
      
      const elements = DOMHelper.$$('.item');
      expect(elements).toHaveLength(3);
      expect(elements[0].textContent).toBe('One');
      expect(elements[2].textContent).toBe('Three');
    });

    it('should handle non-existent elements', () => {
      const element = DOMHelper.$('#non-existent');
      expect(element).toBeNull();
      
      const elements = DOMHelper.$$('.non-existent');
      expect(elements).toHaveLength(0);
    });
  });

  describe('Element Creation', () => {
    it('should create elements with attributes', () => {
      const div = DOMHelper.create('div', {
        id: 'test-div',
        class: 'test-class',
        'data-value': '123'
      });
      
      expect(div.id).toBe('test-div');
      expect(div.className).toBe('test-class');
      expect(div.dataset.value).toBe('123');
    });

    it('should create elements with content', () => {
      const div = DOMHelper.create('div', {}, 'Hello World');
      expect(div.textContent).toBe('Hello World');
    });

    it('should create elements with child elements', () => {
      const child1 = DOMHelper.create('span', {}, 'Child 1');
      const child2 = DOMHelper.create('span', {}, 'Child 2');
      
      const parent = DOMHelper.create('div', {}, [child1, child2]);
      
      expect(parent.children).toHaveLength(2);
      expect(parent.children[0].textContent).toBe('Child 1');
      expect(parent.children[1].textContent).toBe('Child 2');
    });

    it('should handle style objects', () => {
      const div = DOMHelper.create('div', {
        style: {
          color: 'red',
          fontSize: '16px',
          marginTop: '10px'
        }
      });
      
      expect(div.style.color).toBe('red');
      expect(div.style.fontSize).toBe('16px');
      expect(div.style.marginTop).toBe('10px');
    });
  });

  describe('Event Handling', () => {
    it('should bind direct events', async () => {
      const button = document.createElement('button');
      document.body.appendChild(button);
      
      const callback = vi.fn();
      DOMHelper.on(button, 'click', callback);
      
      await userEvent.click(button);
      
      expect(callback).toHaveBeenCalled();
    });

    it('should handle event delegation', async () => {
      document.body.innerHTML = `
        <div id="container">
          <button class="btn">Click me</button>
        </div>
      `;
      
      const callback = vi.fn();
      DOMHelper.on('#container', 'click', '.btn', callback);
      
      const button = DOMHelper.$('.btn')!;
      await userEvent.click(button);
      
      expect(callback).toHaveBeenCalled();
    });

    it('should handle dynamic elements with delegation', async () => {
      document.body.innerHTML = '<div id="container"></div>';
      
      const callback = vi.fn();
      DOMHelper.on('#container', 'click', '.dynamic', callback);
      
      // Add element after event binding
      const container = DOMHelper.$('#container')!;
      const button = DOMHelper.create('button', { class: 'dynamic' }, 'Dynamic');
      container.appendChild(button);
      
      await userEvent.click(button);
      
      expect(callback).toHaveBeenCalled();
    });

    it('should unsubscribe events', async () => {
      const button = document.createElement('button');
      document.body.appendChild(button);
      
      const callback = vi.fn();
      const unsubscribe = DOMHelper.on(button, 'click', callback);
      
      await userEvent.click(button);
      expect(callback).toHaveBeenCalledTimes(1);
      
      unsubscribe();
      
      await userEvent.click(button);
      expect(callback).toHaveBeenCalledTimes(1); // Still 1
    });
  });

  describe('DOM Manipulation', () => {
    it('should get/set text content', () => {
      document.body.innerHTML = '<div id="test">Original</div>';
      const element = '#test';
      
      expect(DOMHelper.text(element)).toBe('Original');
      
      DOMHelper.text(element, 'Updated');
      expect(DOMHelper.text(element)).toBe('Updated');
    });

    it('should get/set HTML content', () => {
      document.body.innerHTML = '<div id="test"><span>Original</span></div>';
      const element = '#test';
      
      expect(DOMHelper.html(element)).toBe('<span>Original</span>');
      
      DOMHelper.html(element, '<strong>Updated</strong>');
      expect(DOMHelper.html(element)).toBe('<strong>Updated</strong>');
    });

    it('should get/set input values', () => {
      document.body.innerHTML = '<input id="test" value="original">';
      const element = '#test';
      
      expect(DOMHelper.val(element)).toBe('original');
      
      DOMHelper.val(element, 'updated');
      expect(DOMHelper.val(element)).toBe('updated');
    });
  });

  describe('Class Manipulation', () => {
    beforeEach(() => {
      document.body.innerHTML = '<div id="test" class="original"></div>';
    });

    it('should add classes', () => {
      DOMHelper.addClass('#test', 'new', 'another');
      const element = DOMHelper.$('#test')!;
      
      expect(element.classList.contains('original')).toBe(true);
      expect(element.classList.contains('new')).toBe(true);
      expect(element.classList.contains('another')).toBe(true);
    });

    it('should remove classes', () => {
      DOMHelper.addClass('#test', 'remove-me');
      DOMHelper.removeClass('#test', 'remove-me', 'original');
      
      const element = DOMHelper.$('#test')!;
      expect(element.classList.contains('remove-me')).toBe(false);
      expect(element.classList.contains('original')).toBe(false);
    });

    it('should toggle classes', () => {
      const element = '#test';
      
      expect(DOMHelper.toggleClass(element, 'toggle')).toBe(true);
      expect(DOMHelper.hasClass(element, 'toggle')).toBe(true);
      
      expect(DOMHelper.toggleClass(element, 'toggle')).toBe(false);
      expect(DOMHelper.hasClass(element, 'toggle')).toBe(false);
      
      expect(DOMHelper.toggleClass(element, 'forced', true)).toBe(true);
      expect(DOMHelper.hasClass(element, 'forced')).toBe(true);
    });

    it('should check class existence', () => {
      expect(DOMHelper.hasClass('#test', 'original')).toBe(true);
      expect(DOMHelper.hasClass('#test', 'non-existent')).toBe(false);
    });
  });

  describe('Visibility', () => {
    beforeEach(() => {
      document.body.innerHTML = '<div id="test">Content</div>';
    });

    it('should show/hide elements', () => {
      const element = DOMHelper.$('#test') as HTMLElement;
      
      DOMHelper.hide('#test');
      expect(element.style.display).toBe('none');
      
      DOMHelper.show('#test');
      expect(element.style.display).not.toBe('none');
    });

    it('should toggle visibility', () => {
      const element = DOMHelper.$('#test') as HTMLElement;
      
      DOMHelper.toggle('#test');
      expect(element.style.display).toBe('none');
      
      DOMHelper.toggle('#test');
      expect(element.style.display).not.toBe('none');
      
      DOMHelper.toggle('#test', false);
      expect(element.style.display).toBe('none');
    });
  });

  describe('Attributes', () => {
    beforeEach(() => {
      document.body.innerHTML = '<div id="test" data-original="value"></div>';
    });

    it('should get/set attributes', () => {
      expect(DOMHelper.attr('#test', 'data-original')).toBe('value');
      
      DOMHelper.attr('#test', 'data-new', 'new-value');
      expect(DOMHelper.attr('#test', 'data-new')).toBe('new-value');
    });

    it('should remove attributes', () => {
      DOMHelper.removeAttr('#test', 'data-original');
      expect(DOMHelper.attr('#test', 'data-original')).toBeNull();
    });
  });

  describe('Utilities', () => {
    it('should debounce function calls', async () => {
      vi.useFakeTimers();
      const callback = vi.fn();
      const debounced = DOMHelper.debounce(callback, 100);
      
      debounced();
      debounced();
      debounced();
      
      expect(callback).not.toHaveBeenCalled();
      
      vi.advanceTimersByTime(100);
      
      expect(callback).toHaveBeenCalledTimes(1);
      
      vi.useRealTimers();
    });

    it('should throttle function calls', async () => {
      vi.useFakeTimers();
      const callback = vi.fn();
      const throttled = DOMHelper.throttle(callback, 100);
      
      throttled();
      throttled();
      throttled();
      
      expect(callback).toHaveBeenCalledTimes(1);
      
      vi.advanceTimersByTime(100);
      throttled();
      
      expect(callback).toHaveBeenCalledTimes(2);
      
      vi.useRealTimers();
    });
  });

  describe('Measurements', () => {
    it('should get element offset', () => {
      document.body.innerHTML = '<div id="test" style="position: absolute; top: 100px; left: 50px;">Test</div>';
      
      const offset = DOMHelper.offset('#test');
      expect(offset).toBeDefined();
      expect(offset?.top).toBeGreaterThanOrEqual(0);
      expect(offset?.left).toBeGreaterThanOrEqual(0);
    });

    it('should get element dimensions', () => {
      document.body.innerHTML = '<div id="test" style="width: 200px; height: 100px;">Test</div>';
      
      const dimensions = DOMHelper.dimensions('#test');
      expect(dimensions).toBeDefined();
      // JSDOM doesn't calculate real dimensions, so we just check structure
      expect(dimensions).toHaveProperty('width');
      expect(dimensions).toHaveProperty('height');
    });
  });

  describe('MutationObserver', () => {
    it('should observe mutations', async () => {
      document.body.innerHTML = '<div id="test"></div>';
      const element = DOMHelper.$('#test')!;
      
      const callback = vi.fn();
      const unobserve = DOMHelper.observe(element, callback);
      
      // Make a mutation
      element.appendChild(document.createElement('span'));
      
      // Wait for mutation observer
      await new Promise(resolve => setTimeout(resolve, 0));
      
      expect(callback).toHaveBeenCalled();
      
      unobserve();
    });
  });
});