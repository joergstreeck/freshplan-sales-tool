--- a/backend/src/test/java/de/freshplan/api/UserResourceIT.java
+++ b/backend/src/test/java/de/freshplan/api/UserResourceIT.java
@@ -335,10 +335,12 @@ class UserResourceIT {
     assertThat(foundUser.getUsername()).isEqualTo(testUser.getUsername());
   }
 
   private CreateUserRequest createValidCreateRequest() {
+    // Use timestamp and thread ID to ensure unique usernames across parallel test runs
+    String uniqueId = System.currentTimeMillis() + "_" + Thread.currentThread().getId();
     return CreateUserRequest.builder()
-        .username("new.user")
+        .username("new.user." + uniqueId)
         .firstName("New")
         .lastName("User")
-        .email("new.user@freshplan.de")
+        .email("new.user." + uniqueId + "@freshplan.de")
         .build();
   }
 
   private UpdateUserRequest createValidUpdateRequest() {
+    String uniqueId = System.currentTimeMillis() + "_" + Thread.currentThread().getId();
     return UpdateUserRequest.builder()
-        .username("updated.user")
+        .username("updated.user." + uniqueId)
         .firstName("Updated")
         .lastName("User")
-        .email("updated.user@freshplan.de")
+        .email("updated.user." + uniqueId + "@freshplan.de")
         .build();
   }
 
   @BeforeEach
   @Transactional
   void setUp() {
+    // Clean up any existing test users to prevent conflicts
+    userRepository.delete("username LIKE ?1", "test.user%");
+    userRepository.delete("username LIKE ?1", "new.user%");
+    userRepository.delete("username LIKE ?1", "to.delete%");
+    userRepository.delete("username LIKE ?1", "updated.user%");
+    
+    String uniqueId = System.currentTimeMillis() + "_" + Thread.currentThread().getId();
     testUser = new User("test.user." + uniqueId, "Test", "User");
     testUser.setEmail("test.user." + uniqueId + "@freshplan.de");  
     userRepository.persist(testUser);
     
     validCreateRequest = createValidCreateRequest();
     validUpdateRequest = createValidUpdateRequest();
   }