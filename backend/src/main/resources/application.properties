# --- HTTP Server ---
quarkus.http.port=8080

# --- DB ---
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/freshplan
quarkus.datasource.username=${DB_USERNAME:freshplan}
quarkus.datasource.password=${DB_PASSWORD:freshplan}
quarkus.hibernate-orm.database.generation=validate

# Schema-Validation wieder aktiviert - Schema ist stabil
%dev.quarkus.hibernate-orm.database.generation=validate
quarkus.flyway.migrate-at-start=true

# --- OIDC Enhanced Configuration ---
# Production: https://auth.z-catering.de/realms/freshplan-realm
# Development: http://localhost:8180/realms/freshplan-realm
quarkus.oidc.auth-server-url=${KEYCLOAK_URL:http://localhost:8180}/realms/${KEYCLOAK_REALM:freshplan-realm}
quarkus.oidc.client-id=${KEYCLOAK_CLIENT_ID:freshplan-backend}
quarkus.oidc.credentials.secret=${KEYCLOAK_CLIENT_SECRET}
quarkus.oidc.application-type=service
quarkus.oidc.tls.verification=certificate-validation

# Enhanced JWT Configuration
quarkus.oidc.token.issuer=${KEYCLOAK_URL:http://localhost:8180}/realms/${KEYCLOAK_REALM:freshplan-realm}
quarkus.oidc.token.audience=${KEYCLOAK_CLIENT_ID:freshplan-backend}
quarkus.oidc.jwks-path=${KEYCLOAK_URL:http://localhost:8180}/realms/${KEYCLOAK_REALM:freshplan-realm}/protocol/openid-connect/certs

# Token validation settings  
# Note: refresh-expired only works for WEB_APP, not SERVICE applications
# quarkus.oidc.token.refresh-expired=true
quarkus.oidc.token.verify-access-token-with-user-info=false
quarkus.oidc.token.allow-jwt-introspection=true
quarkus.oidc.token.allow-opaque-token-introspection=true

# Role mapping configuration
quarkus.oidc.roles.role-claim-path=realm_access/roles
# Note: roles.source=idtoken only works for WEB_APP, not SERVICE applications
# quarkus.oidc.roles.source=idtoken

# Security configuration - require authentication for all endpoints by default
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated

# Allow health endpoints without authentication
quarkus.http.auth.permission.health.paths=/q/health,/q/health/*
quarkus.http.auth.permission.health.policy=permit
quarkus.http.auth.permission.health.methods=GET

# Dev mode: Disable authentication for development
%dev.quarkus.oidc.enabled=false
%dev.quarkus.security.auth.enabled-in-dev-mode=false

# Test mode: Disable authentication for tests
%test.quarkus.oidc.enabled=false
%test.quarkus.http.auth.basic=false
%test.quarkus.http.auth.form.enabled=false
# Override the default authenticated permission for tests
%test.quarkus.http.auth.permission.authenticated.paths=/non-existent-path
%test.quarkus.http.auth.permission.authenticated.policy=deny
%test.quarkus.http.auth.permission.permit-all.paths=/*
%test.quarkus.http.auth.permission.permit-all.policy=permit

# E2E Test mode: Enable OIDC for integration tests (requires running Keycloak)
%e2e.quarkus.oidc.enabled=true
%e2e.quarkus.http.port=8081
%e2e.quarkus.oidc.auth-server-url=http://localhost:8180/realms/freshplan
%e2e.quarkus.oidc.client-id=freshplan-backend
%e2e.quarkus.oidc.application-type=service

# --- CORS (f√ºr Vite Dev) ---
# Security: Credentials disabled to prevent CSRF attacks
# Note: Frontend authentication uses Bearer tokens in Authorization header (not cookies)
# This configuration is safe as our app doesn't rely on credential-based CORS
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:5173,http://192.168.1.42:5173,http://127.0.0.1:5173
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with,origin
quarkus.http.cors.exposed-headers=location,content-disposition
quarkus.http.cors.access-control-allow-credentials=false
quarkus.http.cors.access-control-max-age=86400

# --- OpenAPI ---
quarkus.smallrye-openapi.path=/openapi
quarkus.swagger-ui.always-include=true

# --- Flyway Baseline ---
quarkus.flyway.baseline-on-migrate=true

# --- Logging Configuration ---
# Console logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO

# File logging with rotation
quarkus.log.file.enable=true
quarkus.log.file.path=logs/backend.log
quarkus.log.file.level=INFO
quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# Log rotation settings
quarkus.log.file.rotation.max-file-size=10M
quarkus.log.file.rotation.max-backup-index=5
quarkus.log.file.rotation.file-suffix=.yyyy-MM-dd
quarkus.log.file.rotation.rotate-on-boot=true

# Category specific logging
quarkus.log.category."de.freshplan".level=DEBUG
quarkus.log.category."org.hibernate.SQL".level=DEBUG
%prod.quarkus.log.category."org.hibernate.SQL".level=INFO
quarkus.log.category."io.quarkus".level=INFO
