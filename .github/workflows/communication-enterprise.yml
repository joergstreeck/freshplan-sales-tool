name: communication-enterprise-pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_BACKEND: ${{ env.REGISTRY }}/freshplan-comm-backend
  IMAGE_FRONTEND: ${{ env.REGISTRY }}/freshplan-comm-frontend

jobs:
  backend:
    name: Backend – Build & Test (Jacoco gates)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '${{ env.JAVA_VERSION }}' }
      - name: Maven Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
      - name: Unit & IT with coverage
        run: ./mvnw -B -Pcoverage verify
      - name: Enforce Coverage >= 0.85 (Jacoco)
        run: |
          COV=$(grep -m1 -Po '(?<=<counter type="LINE" missed=")\d+(?:" covered=")\d+' target/site/jacoco/jacoco.xml || true)
          echo "Jacoco summary: $COV"
          python3 - <<'PY'
import xml.etree.ElementTree as ET
t=ET.parse('target/site/jacoco/jacoco.xml'); c=t.getroot().findall('counter')
miss, cov=0,0
for x in c:
  if x.attrib.get('type')=='LINE':
    miss=int(x.attrib['missed']); cov=int(x.attrib['covered'])
    break
ratio = cov/(cov+miss) if cov+miss>0 else 0
print('Coverage:', ratio)
import sys
sys.exit(0 if ratio>=0.85 else 1)
PY

  frontend:
    name: Frontend – Jest/RTL (80%+) & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '${{ env.NODE_VERSION }}' }
      - name: NPM Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
      - run: npm run test:ci
      - run: npm run build

  e2e:
    name: Playwright E2E Smoke
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '${{ env.NODE_VERSION }}' }
      - run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E
        env:
          BASE_URL: ${{ secrets.E2E_BASE_URL }}
          AUTH_TOKEN: ${{ secrets.E2E_AUTH_TOKEN }}
        run: npm run e2e:ci

  security-sast:
    name: Security – SAST & Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v4.1.0
        with:
          project: "freshplan-comm"
          path: "."
          format: "HTML"
      - name: NPM audit
        run: npm audit --audit-level=high || true

  container:
    name: Docker Build & Scan
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with: { registry: ghcr.io, username: ${{ github.actor }}, password: ${{ secrets.GITHUB_TOKEN }} }
      - name: Build backend image
        run: docker build -f docker/Dockerfile.backend -t $IMAGE_BACKEND:${{ github.sha }} .
      - name: Build frontend image
        run: docker build -f docker/Dockerfile.frontend -t $IMAGE_FRONTEND:${{ github.sha }} .
      - name: Trivy image scan (backend)
        uses: aquasecurity/trivy-action@0.20.0
        with: { image-ref: ${{ env.IMAGE_BACKEND }}:${{ github.sha }}, severity: 'CRITICAL,HIGH', exit-code: '1' }
      - name: Trivy image scan (frontend)
        uses: aquasecurity/trivy-action@0.20.0
        with: { image-ref: ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}, severity: 'CRITICAL,HIGH', exit-code: '1' }
      - name: Push images
        run: |
          docker push $IMAGE_BACKEND:${{ github.sha }}
          docker push $IMAGE_FRONTEND:${{ github.sha }}

  dast:
    name: DAST – OWASP ZAP Baseline
    needs: [container]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ secrets.ZAP_TARGET_URL }}
          rules_file_name: security/zap-rules.txt
          cmd_options: '-a'
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with: { name: zap-report, path: 'zap_report.html' }

  perf:
    name: k6 Performance (P95<200ms)
    needs: [container]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: k6/comm_load_test.js
          flags: --vus 50 --duration 3m
        env:
          BASE_URL: ${{ secrets.PERF_BASE_URL }}
          AUTH_TOKEN: ${{ secrets.PERF_AUTH_TOKEN }}

  deploy:
    name: Deploy – Rolling (staging→prod)
    needs: [e2e, security-sast, dast, perf]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl & kustomize
        uses: imranismail/setup-kustomize@v2
        with: { kustomize-version: '4.5.7' }
      - uses: azure/setup-kubectl@v4
      - name: Kube auth
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig && export KUBECONFIG=$PWD/kubeconfig
      - name: Set images (staging)
        run: |
          cd k8s/overlays/staging
          kustomize edit set image backend=${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          kustomize edit set image frontend=${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          kustomize build . | kubectl apply -f -
      - name: Wait for rollout (staging)
        run: |
          kubectl rollout status deploy/freshplan-comm-backend -n comm --timeout=180s
          kubectl rollout status deploy/freshplan-comm-frontend -n comm --timeout=180s
      - name: Smoke check (staging)
        run: |
          curl -fsSL ${{ secrets.STAGING_URL }}/health || exit 1
      - name: Promote to prod (rolling)
        run: |
          cd k8s/overlays/prod
          kustomize edit set image backend=${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          kustomize edit set image frontend=${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          kustomize build . | kubectl apply -f -
      - name: Wait for rollout (prod)
        run: |
          kubectl rollout status deploy/freshplan-comm-backend -n comm --timeout=180s
          kubectl rollout status deploy/freshplan-comm-frontend -n comm --timeout=180s
