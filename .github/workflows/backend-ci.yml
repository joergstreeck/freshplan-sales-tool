name: Backend CI

on:
  pull_request:
    paths: ['backend/**']
  push:
    branches: [main]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Kill job after 30 minutes to prevent infinite hangs
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: freshplan
          POSTGRES_USER: freshplan
          POSTGRES_PASSWORD: freshplan
        options: >-
          --health-cmd "pg_isready -U freshplan -d freshplan"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17 (Quarkus 2.x Standard)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Clean Corrupted Maven Dependencies
        run: |
          echo "🧹 Cleaning potentially corrupted Maven dependencies..."
          # Remove specific corrupted JARs that cause CI failures
          rm -rf ~/.m2/repository/org/jboss/threads/jboss-threads/3.8.0.Final
          # Also clean other common problem JARs
          rm -rf ~/.m2/repository/io/quarkus/quarkus-junit5
          rm -rf ~/.m2/repository/io/quarkus/quarkus-test-common
          echo "✅ Maven cache cleaned"

      - name: Build Project without Tests
        working-directory: backend
        timeout-minutes: 5  # Prevent hang on build
        run: |
          echo "🏗️ Building project with DevServices disabled..."
          ./mvnw -B clean compile \
            -Dquarkus.devservices.enabled=false \
            -Dquarkus.datasource.devservices.enabled=false \
            -DskipTests=true
          echo "✅ Build completed"

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U freshplan && echo "✅ PostgreSQL is ready" && exit 0
            echo "⏳ Waiting for PostgreSQL... attempt $i/30"
            sleep 2
          done
          echo "❌ PostgreSQL not ready after 60 seconds" && exit 1

      - name: DB Schema Reset (Hard Reset für sauberen Start)
        env:
          PGPASSWORD: freshplan
        run: |
          # KRITISCH: Hard Schema Reset - garantiert leerer Start (keine Drift)
          psql -h localhost -U freshplan -d freshplan -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"
          echo "✅ Schema reset - garantiert 0 customers"
      
      - name: Environment Diagnostics (A00 - Früh scheitern bei Fehlkonfiguration)
        env:
          PGPASSWORD: freshplan
        run: |
          
          # Environment Diagnostics (HART - Abort bei Fehlkonfiguration)
          echo "=== A00 Environment Check - CRITICAL VALIDATION ==="
          
          # KRITISCH: Flyway Locations prüfen
          FLYWAY_LOCATIONS=$(grep -r "quarkus.flyway.locations" backend/src/main/resources/ || echo "classpath:db/migration")
          if [[ "$FLYWAY_LOCATIONS" != *"classpath:db/migration"* ]] || [[ "$FLYWAY_LOCATIONS" == *"testdata"* ]] || [[ "$FLYWAY_LOCATIONS" == *"ci-migrations"* ]]; then
            echo "❌ ABORT: Invalid flyway.locations: $FLYWAY_LOCATIONS"
            echo "   MUST BE: classpath:db/migration (nothing else!)"
            exit 1
          fi
          echo "✅ Flyway locations: classpath:db/migration"
          
          # INFO: Skip customer count check - tables don't exist yet
          # The tests will create their own schema via Flyway
          echo "✅ Schema reset complete - tests will handle migrations"
          
          # KRITISCH: DevServices disabled in CI
          # Check the CI profile since we use -Dquarkus.profile=ci
          if ! grep -q "quarkus.datasource.devservices.enabled=false" backend/src/test/resources/application-ci.properties; then
            echo "❌ ABORT: DevServices not disabled in CI profile"
            echo "   Add: quarkus.datasource.devservices.enabled=false to application-ci.properties"
            exit 1
          fi
          echo "✅ DevServices disabled in CI profile"
          
          # INFO: Flyway will run during test execution
          echo "📋 Flyway migrations will be executed by tests"
          
      - name: Sanity Check - DB Connection Verification
        env:
          PGPASSWORD: freshplan
        run: |
          echo "=== Verifying DB Connection ==="
          psql -h localhost -U freshplan -d freshplan -c "SELECT current_user, current_database();" || exit 1
          echo "✅ Connected as expected: freshplan@freshplan"

          # Verify schema exists
          psql -h localhost -U freshplan -d freshplan -c "SELECT COUNT(*) FROM information_schema.schemata WHERE schema_name = 'public';"

      - name: Core Tests (PR Pipeline - Ein Maven-Run)
        working-directory: backend
        timeout-minutes: 20  # Prevent test hang
        run: |
          # Using CI profile with DevServices disabled at build time
          ./mvnw -B clean test \
            -Dtest="A00_EnvDiagTest,*Test" \
            -DexcludedGroups="integration,slow" \
            -DfailIfNoTests=false \
            -Dquarkus.profile=ci \
            -Dquarkus.devservices.enabled=false \
            -Dquarkus.datasource.devservices.enabled=false \
            -Dquarkus.test.hang-detection-timeout=60s \
            -Dquarkus.test.continuous-testing=disabled \
            -Dtest.run.id=${{ github.run_id }}
          
      - name: Upload Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Core Tests
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit
          
      - name: Check DB Invariants
        if: always()
        env:
          PGPASSWORD: freshplan
        run: |
          echo "=== DB Invariant Checks ==="

          # First verify we're checking the right DB
          echo "📍 Checking database: freshplan@localhost:5432"

          # Check if customers table exists
          if psql -h localhost -U freshplan -d freshplan -tAc "SELECT to_regclass('public.customers') IS NOT NULL" | grep -q 't'; then
            echo "✅ Table 'customers' exists in CI-DB"

            echo "📊 Checking for duplicate customer_numbers..."
            DUPLICATES=$(psql -h localhost -U freshplan -d freshplan -t -c \
              "SELECT COUNT(*) FROM (SELECT customer_number FROM customers GROUP BY customer_number HAVING COUNT(*) > 1) AS dups")
            if [ "$DUPLICATES" -gt 0 ]; then
              echo "❌ Found $DUPLICATES duplicate customer_numbers:"
              psql -h localhost -U freshplan -d freshplan -c \
                "SELECT customer_number, COUNT(*) FROM customers GROUP BY customer_number HAVING COUNT(*) > 1"
            else
              echo "✅ No duplicate customer_numbers found"
            fi
          else
            echo "⚠️ Table 'customers' does not exist in CI-DB"
            echo "   Hint: Tests might have used DevServices instead of CI-DB"
            echo "   Checking for DevServices indicators..."

            # Check if there's any schema at all
            TABLES=$(psql -h localhost -U freshplan -d freshplan -t -c \
              "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
            if [ "$TABLES" -eq 0 ]; then
              echo "   ❌ No tables in public schema - DB is empty!"
              echo "   CRITICAL: Tests did NOT use the CI database"
            else
              echo "   Found $TABLES tables in public schema"
            fi
          fi

          echo "📊 Checking for duplicate idempotency keys..."
          if psql -h localhost -U freshplan -d freshplan -tAc "SELECT to_regclass('public.idempotency_keys') IS NOT NULL" | grep -q 't'; then
            DUPLICATES=$(psql -h localhost -U freshplan -d freshplan -t -c \
              "SELECT COUNT(*) FROM (SELECT idempotency_key FROM idempotency_keys GROUP BY idempotency_key HAVING COUNT(*) > 1) AS dups")
            if [ "$DUPLICATES" -gt 0 ]; then
              echo "❌ Found $DUPLICATES duplicate idempotency keys:"
              psql -h localhost -U freshplan -d freshplan -c \
                "SELECT idempotency_key, COUNT(*) FROM idempotency_keys GROUP BY idempotency_key HAVING COUNT(*) > 1"
            else
              echo "✅ No duplicate idempotency keys found"
            fi
          else
            echo "ℹ️ No idempotency_keys table found (OK if not implemented yet)"
          fi

      - name: Test Summary
        if: success()
        run: |
          echo "✅ All core tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "**Tests:** $(grep -r '@Tag("core")' backend/src/test/ | wc -l) core tests" >> $GITHUB_STEP_SUMMARY
          echo "**Migration:** $(grep -r '@Tag("migrate")' backend/src/test/ | wc -l) tests tagged for future migration" >> $GITHUB_STEP_SUMMARY