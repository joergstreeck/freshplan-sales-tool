name: Backend CI

on:
  pull_request:
    paths: ['backend/**']
  push:
    branches: [main]

jobs:
  test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17 (Quarkus 2.x Standard)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven
          
      - name: DB Schema Reset (Hard Reset für sauberen Start)
        env:
          PGPASSWORD: postgres
        run: |
          # Health-Check: PostgreSQL bereit?
          until pg_isready -h localhost -U postgres -d test_db; do 
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          echo "✅ PostgreSQL ready"
          
          # KRITISCH: Hard Schema Reset - garantiert leerer Start (keine Drift)
          psql -h localhost -U postgres -d test_db -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"
          echo "✅ Schema reset - garantiert 0 customers"
      
      - name: Environment Diagnostics (A00 - Früh scheitern bei Fehlkonfiguration)
        env:
          PGPASSWORD: postgres
        run: |
          
          # Environment Diagnostics (HART - Abort bei Fehlkonfiguration)
          echo "=== A00 Environment Check - CRITICAL VALIDATION ==="
          
          # KRITISCH: Flyway Locations prüfen
          FLYWAY_LOCATIONS=$(grep -r "quarkus.flyway.locations" backend/src/main/resources/ || echo "classpath:db/migration")
          if [[ "$FLYWAY_LOCATIONS" != *"classpath:db/migration"* ]] || [[ "$FLYWAY_LOCATIONS" == *"testdata"* ]] || [[ "$FLYWAY_LOCATIONS" == *"ci-migrations"* ]]; then
            echo "❌ ABORT: Invalid flyway.locations: $FLYWAY_LOCATIONS"
            echo "   MUST BE: classpath:db/migration (nothing else!)"
            exit 1
          fi
          echo "✅ Flyway locations: classpath:db/migration"
          
          # KRITISCH: Customer count muss 0 sein
          CUSTOMER_COUNT=$(psql -h localhost -U postgres -d test_db -t -c "SELECT COUNT(*) FROM customers" 2>/dev/null || echo "0")
          CUSTOMER_COUNT=$(echo "$CUSTOMER_COUNT" | tr -d ' ')
          if [ "$CUSTOMER_COUNT" != "0" ]; then
            echo "❌ ABORT: Schema not empty! Found $CUSTOMER_COUNT customers"
            echo "   Schema MUST start with 0 customers for clean tests"
            exit 1
          fi
          echo "✅ Schema contains 0 customers at start"
          
          # KRITISCH: DevServices disabled in CI
          if ! grep -q "quarkus.datasource.devservices.enabled=false" backend/src/test/resources/application-test.properties; then
            echo "❌ ABORT: DevServices not disabled in test profile"
            echo "   Add: quarkus.datasource.devservices.enabled=false to application-test.properties"
            exit 1
          fi
          echo "✅ DevServices disabled in test profile"
          
          # INFO: Top-5 Flyway History (wenn vorhanden)
          echo "📋 Flyway Schema History (Top 5):"
          psql -h localhost -U postgres -d test_db -c "SELECT version, description FROM flyway_schema_history ORDER BY installed_rank DESC LIMIT 5;" 2>/dev/null || echo "No flyway history yet"
          
      - name: Core Tests (PR Pipeline - Ein Maven-Run)
        working-directory: backend
        run: |
          ./mvnw -B -T 1C clean test -Pcore-tests \
            -Dquarkus.profile=ci \
            -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/test_db \
            -Dquarkus.datasource.username=postgres \
            -Dquarkus.datasource.password=postgres \
            -Dtest.run.id=${{ github.run_id }}
          
      - name: Upload Test Results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Core Tests
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit
          
      - name: Test Summary
        if: success()
        run: |
          echo "✅ All core tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "**Tests:** $(grep -r '@Tag("core")' backend/src/test/ | wc -l) core tests" >> $GITHUB_STEP_SUMMARY
          echo "**Migration:** $(grep -r '@Tag("migrate")' backend/src/test/ | wc -l) tests tagged for future migration" >> $GITHUB_STEP_SUMMARY