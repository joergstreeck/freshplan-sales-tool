name: Database Growth Check

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  check-database-growth:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: freshplan
          POSTGRES_PASSWORD: freshplan
          POSTGRES_DB: freshplan
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Record database state before tests
      run: |
        cd backend
        # Run a simple test to initialize the database
        ./mvnw test -Dtest="DatabaseAnalysisTest#countCustomers" -q || true
        
        # Count customers before
        CUSTOMERS_BEFORE=$(./mvnw test -Dtest="DatabaseAnalysisTest#countCustomers" -q | grep "Total Customers:" | awk '{print $3}')
        echo "CUSTOMERS_BEFORE=$CUSTOMERS_BEFORE" >> $GITHUB_ENV
        echo "Customers before tests: $CUSTOMERS_BEFORE"

    - name: Run all tests
      run: |
        cd backend
        ./mvnw test

    - name: Check database growth
      run: |
        cd backend
        # Count customers after
        CUSTOMERS_AFTER=$(./mvnw test -Dtest="DatabaseAnalysisTest#countCustomers" -q | grep "Total Customers:" | awk '{print $3}')
        echo "CUSTOMERS_AFTER=$CUSTOMERS_AFTER" >> $GITHUB_ENV
        echo "Customers after tests: $CUSTOMERS_AFTER"
        
        # Calculate growth
        GROWTH=$((CUSTOMERS_AFTER - CUSTOMERS_BEFORE))
        echo "Database growth: $GROWTH customers"
        
        # Fail if growth exceeds threshold
        if [ $GROWTH -gt 10 ]; then
          echo "❌ ERROR: Database grew by $GROWTH customers during tests!"
          echo "This indicates missing test isolation (@TestTransaction)."
          echo "Please fix the tests to use proper isolation."
          exit 1
        else
          echo "✅ Database growth is acceptable: $GROWTH customers"
        fi

    - name: Create growth report
      if: always()
      run: |
        cat > database-growth-report.md << EOF
        # Database Growth Report
        
        Date: $(date)
        Branch: ${{ github.ref }}
        Commit: ${{ github.sha }}
        
        ## Results
        - Customers before tests: ${{ env.CUSTOMERS_BEFORE }}
        - Customers after tests: ${{ env.CUSTOMERS_AFTER }}
        - Growth: $((${{ env.CUSTOMERS_AFTER }} - ${{ env.CUSTOMERS_BEFORE }}))
        
        ## Status
        $(if [ $((${{ env.CUSTOMERS_AFTER }} - ${{ env.CUSTOMERS_BEFORE }})) -gt 10 ]; then echo "❌ FAILED - Excessive growth detected"; else echo "✅ PASSED - Growth within limits"; fi)
        
        ## Recommendations
        - Use @TestTransaction for test isolation
        - Implement cleanup in @AfterEach if needed
        - Review tests that create persistent data
        EOF

    - name: Upload growth report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: database-growth-report
        path: database-growth-report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const growth = ${{ env.CUSTOMERS_AFTER }} - ${{ env.CUSTOMERS_BEFORE }};
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ❌ Database Growth Check Failed
            
            The tests added **${growth} customers** to the database, exceeding the threshold of 10.
            
            This typically means tests are missing proper isolation. Please ensure:
            1. Use \`@TestTransaction\` instead of \`@Transactional\` in tests
            2. Don't rely on data persisting between tests
            3. Each test should be self-contained
            
            See the [Test Isolation Guide](docs/guides/TEST_ISOLATION_GUIDE.md) for more details.`
          })