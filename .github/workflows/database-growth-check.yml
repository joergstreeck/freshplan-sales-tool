name: Database Growth Check

on:
  push:
    branches: [ main, develop, feature/*, feat/* ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: db-growth-${{ github.ref }}
  cancel-in-progress: true


jobs:
  check-database-growth:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: freshplan
          POSTGRES_PASSWORD: freshplan
          POSTGRES_DB: freshplan  # Changed from postgres to freshplan
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U freshplan -d freshplan"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

    - name: Install PostgreSQL client
      run: sudo apt-get update && sudo apt-get install -y postgresql-client

    - name: Reset DB schema for clean state
      env:
        PGPASSWORD: freshplan
      run: |
        echo "Resetting database schema to clean state..."
        psql -h localhost -U freshplan -d freshplan -v ON_ERROR_STOP=1 -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;"
        psql -h localhost -U freshplan -d freshplan -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        psql -h localhost -U freshplan -d freshplan -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
        echo "Database schema reset successfully"
    
    - name: Skip explicit migrations - tests will handle it
      run: |
        echo "Skipping explicit migration step - Tests will run Flyway with clean-at-start=true"
        echo "This avoids duplicate migration issues"

    - name: Run core tests with CI profile
      working-directory: backend
      env:
        QUARKUS_PROFILE: ci
        MAVEN_OPTS: -Xmx2g -XX:MaxMetaspaceSize=512m
        RUN_SUFFIX: ${{ github.run_id }}
      run: |
        echo "Running CORE tests only with CI profile..."
        
        # Run only A00 diagnostic test
        # Let Flyway clean and migrate as configured in application-ci.properties
        ./mvnw clean test \
          -B \
          -T 1C \
          -Dtest="A00_EnvDiagTest" \
          -Djunit.jupiter.execution.timeout.default=2m \
          -Dmaven.test.failure.ignore=false \
          -DtrimStackTrace=false \
          -Dtest.run.id=${{ github.run_id }} \
          -DRUN_SUFFIX=${{ github.run_id }} \
          -Dquarkus.devservices.enabled=false \
          -Dquarkus.datasource.devservices.enabled=false \
          -Dquarkus.datasource.jdbc.url="jdbc:postgresql://localhost:5432/freshplan?options=-c%20ci.build%3Dtrue" \
          -Dquarkus.datasource.username=freshplan \
          -Dquarkus.datasource.password=freshplan
        
        echo "✅ Tests completed"
    
    - name: Verify test cleanup
      env:
        PGPASSWORD: freshplan
      run: |
        # After tests, verify database is properly cleaned
        # With clean-at-start=true, each test run should start fresh
        CUSTOMER_COUNT=$(psql -h localhost -U freshplan -d freshplan -tAc "SELECT COUNT(*) FROM customers;" 2>/dev/null || echo "0")
        echo "Customers after tests: $CUSTOMER_COUNT"

        # Check if test data was properly cleaned
        TEST_DATA_COUNT=$(psql -h localhost -U freshplan -d freshplan -tAc "SELECT COUNT(*) FROM customers WHERE is_test_data = true;" 2>/dev/null || echo "0")
        echo "Test customers remaining: $TEST_DATA_COUNT"

        echo "✅ Test cleanup verification complete"

    - name: Check for test isolation issues
      if: always()
      working-directory: backend
      run: |
        echo "Checking for common test isolation problems..."
        
        # Look for tests without @TestTransaction
        echo "Tests that might be missing @TestTransaction:"
        grep -r "@Test" src/test --include="*.java" | \
          grep -v "@TestTransaction" | \
          grep -E "(create|save|persist|insert|update|delete)" | \
          head -20 || echo "No obvious issues found"
        
        echo ""
        echo "Remember:"
        echo "- Use @TestTransaction for database tests"
        echo "- Each test should be self-contained"
        echo "- Don't rely on data from other tests"

    - name: Upload test reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          backend/target/surefire-reports/**
          backend/target/failsafe-reports/**