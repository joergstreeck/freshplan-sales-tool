name: Migration Safety Check
# Update: 2025-10-12 - DEV-SEED Support (3-Ordner-Struktur)

on:
  push:
    branches: ['**']
    paths:
      - 'backend/src/main/resources/db/migration/V*.sql'
      - 'backend/src/main/resources/db/dev-migration/V*.sql'
      - 'backend/src/main/resources/db/dev-seed/V*.sql'
  pull_request:
    branches: ['**']
    paths:
      - 'backend/src/main/resources/db/migration/V*.sql'
      - 'backend/src/main/resources/db/dev-migration/V*.sql'
      - 'backend/src/main/resources/db/dev-seed/V*.sql'

jobs:
  check-migrations:
    name: Check Migration Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Volle History f√ºr Vergleiche

      - name: Check Migration Folders
        run: |
          echo "üîç Pr√ºfe Migration-Ordner (3-Ordner-Struktur)..."

          # Sammle alle Migrations-Dateien (ALLE 3 Ordner!)
          MIGRATION_FILES=$(find backend/src/main/resources/db/migration -name "V*.sql" 2>/dev/null || echo "")
          DEV_FILES=$(find backend/src/main/resources/db/dev-migration -name "V*.sql" 2>/dev/null || echo "")
          SEED_FILES=$(find backend/src/main/resources/db/dev-seed -name "V*.sql" 2>/dev/null || echo "")

          ERROR=0

          # Pr√ºfe migration/ (Production)
          if [ ! -z "$MIGRATION_FILES" ]; then
            echo "üìÅ Pr√ºfe migration/ (Production)..."
            for FILE in $MIGRATION_FILES; do
              FILENAME=$(basename "$FILE")

              # Exception: V19 ist bereits deployed (seit 2025-08-08)
              if [ "$FILENAME" = "V19__add_test_data_flag.sql" ]; then
                echo "   ‚ö†Ô∏è  $FILENAME (Exception: bereits deployed)"
                continue
              fi

              # Exception: V10009 enth√§lt test_data im Namen, aber ist strukturell notwendig
              if [ "$FILENAME" = "V10009__add_test_data_flag_to_users.sql" ]; then
                echo "   ‚ö†Ô∏è  $FILENAME (Exception: strukturelle Spalte f√ºr Hibernate)"
                continue
              fi

              # Pr√ºfe auf Test-Keywords
              if echo "$FILENAME" | grep -qiE "(test|demo|seed|sample|debug)"; then
                echo "‚ùå FEHLER: $FILENAME enth√§lt Test-Keywords!"
                echo "   Test-Migrationen geh√∂ren in dev-migration/!"
                ERROR=1
              fi
            done
          fi

          # Pr√ºfe dev-migration/ (Test/Dev)
          if [ ! -z "$DEV_FILES" ]; then
            echo "üìÅ Pr√ºfe dev-migration/ (Test-Migrations)..."
            for FILE in $DEV_FILES; do
              FILENAME=$(basename "$FILE")
              echo "   ‚úì $FILENAME (Test-Migration)"
            done
          fi

          # Pr√ºfe dev-seed/ (DEV-SEED)
          if [ ! -z "$SEED_FILES" ]; then
            echo "üìÅ Pr√ºfe dev-seed/ (DEV-SEED)..."
            for FILE in $SEED_FILES; do
              FILENAME=$(basename "$FILE")
              VERSION=$(echo "$FILENAME" | sed 's/.*V\([0-9]*\)__.*/\1/')

              # CHECK 1: V90001+ Range
              if [ "$VERSION" -lt 90001 ]; then
                echo "‚ùå FEHLER: $FILENAME ist < V90001!"
                echo "   DEV-SEED muss >= V90001 sein (Range V90001+)"
                ERROR=1
              else
                echo "   ‚úì $FILENAME (V${VERSION} >= V90001)"
              fi

              # CHECK 2: 'seed_' Prefix empfohlen
              DESCRIPTION=$(echo "$FILENAME" | sed 's/^V[0-9]*__//' | sed 's/\.sql$//')
              if ! echo "$DESCRIPTION" | grep -q "^seed_"; then
                echo "   ‚ö†Ô∏è  WARNUNG: $FILENAME sollte mit 'seed_' beginnen"
              fi
            done
          fi

          if [ $ERROR -eq 1 ]; then
            echo ""
            echo "‚ùå Migration Safety Check FEHLGESCHLAGEN!"
            exit 1
          fi

          echo "‚úÖ Alle Ordner-Pr√ºfungen bestanden!"

      - name: Check Migration Numbers (2-Sequenzen-Modell)
        run: |
          echo "üî¢ Pr√ºfe Migration-Nummern (2-Sequenzen-Modell)..."

          # Sequenz 1: Sequential (Prod+Test V1-V89999 GEMEINSAM)
          SEQUENTIAL_VERSIONS=$(find backend/src/main/resources/db/migration \
            backend/src/main/resources/db/dev-migration \
            -name "V*.sql" 2>/dev/null | \
            sed 's/.*V\([0-9]*\)__.*/\1/' | awk '$1 < 90000' | sort -n | uniq)

          # Sequenz 2: SEED (V90001+)
          SEED_VERSIONS=$(find backend/src/main/resources/db/dev-seed \
            -name "V*.sql" 2>/dev/null | \
            sed 's/.*V\([0-9]*\)__.*/\1/' | sort -n | uniq)

          ERROR=0

          # Pr√ºfe Sequential Sequenz
          if [ ! -z "$SEQUENTIAL_VERSIONS" ]; then
            echo "üìä Sequenz 1 (Production + Test): V1-V89999 GEMEINSAM"
            PREV=0
            for VERSION in $SEQUENTIAL_VERSIONS; do
              if [ "$VERSION" -le "$PREV" ]; then
                echo "‚ùå FEHLER: V$VERSION ist nicht aufsteigend!"
                echo "   Vorherige: V$PREV"
                ERROR=1
              fi
              PREV=$VERSION
            done
            if [ $ERROR -eq 0 ]; then
              echo "‚úÖ Sequential aufsteigend! (V1 bis V$PREV)"
            fi
          else
            echo "‚ÑπÔ∏è  Keine Sequential Migrationen gefunden"
          fi

          # Pr√ºfe SEED Sequenz
          if [ ! -z "$SEED_VERSIONS" ]; then
            echo ""
            echo "üìä Sequenz 2 (SEED): V90001+"
            PREV=90000
            for VERSION in $SEED_VERSIONS; do
              if [ "$VERSION" -le "$PREV" ]; then
                echo "‚ùå FEHLER: V$VERSION ist nicht aufsteigend!"
                echo "   Vorherige: V$PREV"
                ERROR=1
              fi
              if [ "$VERSION" -lt 90001 ]; then
                echo "‚ùå FEHLER: V$VERSION ist < V90001 (SEED muss >= V90001 sein)!"
                ERROR=1
              fi
              PREV=$VERSION
            done
            if [ $ERROR -eq 0 ]; then
              echo "‚úÖ SEED aufsteigend! (V90001 bis V$PREV)"
            fi
          else
            echo "‚ÑπÔ∏è  Keine SEED Migrationen gefunden"
          fi

          if [ $ERROR -eq 1 ]; then
            echo ""
            echo "‚ùå Nummern-Pr√ºfung FEHLGESCHLAGEN!"
            exit 1
          fi

          echo ""
          echo "‚úÖ Beide Sequenzen korrekt!"

      - name: Summary
        if: success()
        run: |
          echo "üéâ Migration Safety Check BESTANDEN!"
          echo ""
          echo "Alle Pr√ºfungen erfolgreich (3-Ordner-Struktur):"
          echo "  ‚úÖ Ordner-Struktur korrekt (migration/, dev-migration/, dev-seed/)"
          echo "  ‚úÖ Keine Test-Keywords in migration/"
          echo "  ‚úÖ DEV-SEED Range validiert (V90001+)"
          echo "  ‚úÖ Migration-Nummern aufsteigend"
