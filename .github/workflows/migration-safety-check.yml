name: Migration Safety Check

on:
  push:
    branches: ['**']
    paths:
      - 'backend/src/main/resources/db/migration/V*.sql'
      - 'backend/src/main/resources/db/dev-migration/V*.sql'
  pull_request:
    branches: ['**']
    paths:
      - 'backend/src/main/resources/db/migration/V*.sql'
      - 'backend/src/main/resources/db/dev-migration/V*.sql'

jobs:
  check-migrations:
    name: Check Migration Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Volle History f√ºr Vergleiche

      - name: Check Migration Folders
        run: |
          echo "üîç Pr√ºfe Migration-Ordner..."

          # Sammle alle Migrations-Dateien
          MIGRATION_FILES=$(find backend/src/main/resources/db/migration -name "V*.sql" 2>/dev/null || echo "")
          DEV_FILES=$(find backend/src/main/resources/db/dev-migration -name "V*.sql" 2>/dev/null || echo "")

          ERROR=0

          # Pr√ºfe migration/ (Production)
          if [ ! -z "$MIGRATION_FILES" ]; then
            echo "üìÅ Pr√ºfe migration/ (Production)..."
            for FILE in $MIGRATION_FILES; do
              FILENAME=$(basename "$FILE")

              # Exception: V19 ist bereits deployed (seit 2025-08-08)
              if [ "$FILENAME" = "V19__add_test_data_flag.sql" ]; then
                echo "   ‚ö†Ô∏è  $FILENAME (Exception: bereits deployed)"
                continue
              fi

              # Pr√ºfe auf Test-Keywords
              if echo "$FILENAME" | grep -qiE "(test|demo|seed|sample|debug)"; then
                echo "‚ùå FEHLER: $FILENAME enth√§lt Test-Keywords!"
                echo "   Test-Migrationen geh√∂ren in dev-migration/!"
                ERROR=1
              fi
            done
          fi

          # Pr√ºfe dev-migration/ (Test/Dev)
          if [ ! -z "$DEV_FILES" ]; then
            echo "üìÅ Pr√ºfe dev-migration/ (Test/Dev)..."
            for FILE in $DEV_FILES; do
              FILENAME=$(basename "$FILE")
              echo "   ‚úì $FILENAME (Test-Migration)"
            done
          fi

          if [ $ERROR -eq 1 ]; then
            echo ""
            echo "‚ùå Migration Safety Check FEHLGESCHLAGEN!"
            exit 1
          fi

          echo "‚úÖ Alle Ordner-Pr√ºfungen bestanden!"

      - name: Check Migration Numbers
        run: |
          echo "üî¢ Pr√ºfe Migration-Nummern..."

          # Sammle alle Nummern (aus BEIDEN Ordnern)
          ALL_VERSIONS=$(find backend/src/main/resources/db/migration backend/src/main/resources/db/dev-migration \
            -name "V*.sql" 2>/dev/null | \
            sed 's/.*V\([0-9]*\)__.*/\1/' | sort -n | uniq)

          if [ -z "$ALL_VERSIONS" ]; then
            echo "‚ÑπÔ∏è  Keine Migrationen gefunden"
            exit 0
          fi

          # Pr√ºfe aufsteigende Reihenfolge
          PREV=0
          ERROR=0
          for VERSION in $ALL_VERSIONS; do
            if [ "$VERSION" -le "$PREV" ]; then
              echo "‚ùå FEHLER: V$VERSION ist nicht aufsteigend!"
              echo "   Vorherige: V$PREV"
              ERROR=1
            fi
            PREV=$VERSION
          done

          if [ $ERROR -eq 1 ]; then
            echo ""
            echo "‚ùå Nummern-Pr√ºfung FEHLGESCHLAGEN!"
            exit 1
          fi

          echo "‚úÖ Alle Nummern aufsteigend! (V1 bis V$PREV)"

      - name: Summary
        if: success()
        run: |
          echo "üéâ Migration Safety Check BESTANDEN!"
          echo ""
          echo "Alle Pr√ºfungen erfolgreich:"
          echo "  ‚úÖ Ordner-Struktur korrekt"
          echo "  ‚úÖ Keine Test-Keywords in migration/"
          echo "  ‚úÖ Migration-Nummern aufsteigend"
