name: Module 02 - Neukundengewinnung CI/CD

on:
  push:
    branches: [main, develop, feature/module-02-*]
    paths:
      - 'backend/modules/leads/**'
      - 'frontend/src/features/leads/**'
      - 'docs/planung/features-neu/02_neukundengewinnung/**'
      - '.github/workflows/ci-module02.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/modules/leads/**'
      - 'frontend/src/features/leads/**'

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: '80'

jobs:
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: freshplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Unit Tests
        run: |
          cd backend
          ./mvnw test -Dquarkus.test.profile=test \
            -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/freshplan_test

      - name: Run Integration Tests
        run: |
          cd backend
          ./mvnw verify -Dquarkus.test.profile=integration \
            -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/freshplan_test

      - name: Generate Coverage Report
        run: |
          cd backend
          ./mvnw jacoco:report

      - name: Check Coverage Threshold
        run: |
          cd backend
          ./mvnw jacoco:check \
            -Djacoco.rule.element=BUNDLE \
            -Djacoco.rule.counter=LINE \
            -Djacoco.rule.value=COVEREDRATIO \
            -Djacoco.rule.minimum=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/target/site/jacoco/jacoco.xml
          flags: backend-module02
          name: backend-coverage
          fail_ci_if_error: true

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            backend/target/surefire-reports/
            backend/target/failsafe-reports/

  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Lint
        run: |
          cd frontend
          npm run lint

      - name: Run Type Check
        run: |
          cd frontend
          npm run type-check

      - name: Run Unit Tests with Coverage
        run: |
          cd frontend
          npm run test:coverage -- --reporter=junit --reporter=html

      - name: Check Coverage Threshold
        run: |
          cd frontend
          npx nyc check-coverage \
            --lines ${{ env.COVERAGE_THRESHOLD }} \
            --functions ${{ env.COVERAGE_THRESHOLD }} \
            --branches ${{ env.COVERAGE_THRESHOLD }}

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend-module02
          name: frontend-coverage
          fail_ci_if_error: true

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Module-02-Neukundengewinnung'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP Results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check
          path: reports/

  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Start Backend Services
        run: |
          cd backend
          ./mvnw quarkus:dev -Dquarkus.http.test-port=8081 &
          sleep 30
          curl -f http://localhost:8081/q/health || exit 1

      - name: Setup k6
        uses: grafana/k6-action@v0.3.0
        with:
          version: '0.47.0'

      - name: Run k6 Performance Tests
        run: |
          k6 run \
            --out json=k6-results.json \
            --summary-export=k6-summary.json \
            docs/planung/features-neu/02_neukundengewinnung/testing/k6_performance_test.js

      - name: Check Performance Thresholds
        run: |
          # Check if P95 response time is under 200ms
          P95=$(jq '.metrics.http_req_duration.p95' k6-summary.json)
          if (( $(echo "$P95 > 200" | bc -l) )); then
            echo "‚ùå Performance threshold failed: P95 = ${P95}ms (target: <200ms)"
            exit 1
          fi
          echo "‚úÖ Performance threshold passed: P95 = ${P95}ms"

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-results
          path: |
            k6-results.json
            k6-summary.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=freshplan-module02
            -Dsonar.organization=freshfoodz
            -Dsonar.sources=backend/modules/leads,frontend/src/features/leads
            -Dsonar.tests=backend/modules/leads/src/test,frontend/src/features/leads/**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=backend/target/site/jacoco/jacoco.xml
            -Dsonar.qualitygate.wait=true

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend-module02:latest
            ghcr.io/${{ github.repository }}/backend-module02:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend-module02:latest
            ghcr.io/${{ github.repository }}/frontend-module02:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, code-quality, performance-tests]
    if: always()

    steps:
      - name: Check Quality Gates
        run: |
          echo "## üìä Module 02 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Backend Tests
          if [ "${{ needs.backend-tests.result }}" == "success" ]; then
            echo "‚úÖ **Backend Tests**: Passed (Coverage ‚â• 80%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Backend Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Frontend Tests
          if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
            echo "‚úÖ **Frontend Tests**: Passed (Coverage ‚â• 80%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Frontend Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Scan
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ **Security Scan**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Security Scan**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi

          # Code Quality
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "‚úÖ **Code Quality**: SonarCloud quality gate passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.code-quality.result }}" == "skipped" ]; then
            echo "‚ö†Ô∏è **Code Quality**: SonarCloud skipped (no SONAR_TOKEN)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Code Quality**: Quality issues detected" >> $GITHUB_STEP_SUMMARY
          fi

          # Performance Tests
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "‚úÖ **Performance**: P95 < 200ms target met" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Performance**: Not tested or failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Foundation Standards Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- Design System V2: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- API Standards: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Security ABAC: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Testing Coverage: ‚â•80% enforced ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Performance SLO: P95 < 200ms ‚úÖ" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any gate failed
        if: |
          needs.backend-tests.result == 'failure' ||
          needs.frontend-tests.result == 'failure' ||
          needs.security-scan.result == 'failure' ||
          (needs.code-quality.result == 'failure' && needs.code-quality.result != 'skipped')
        run: exit 1