/**
 * Module Base Class Tests
 */

import { describe, it, expect, beforeEach, vi, MockedFunction } from 'vitest';
import Module from '../Module';
import EventBus from '../EventBus';
import StateManager from '../StateManager';

// Create a test module implementation
class TestModule extends Module {
  setupCalled = false;
  bindEventsCalled = false;
  subscribeToStateCalled = false;
  cleanupCalled = false;

  async setup() {
    this.setupCalled = true;
    this.setModuleState({ initialized: true });
  }

  bindEvents() {
    this.bindEventsCalled = true;
    this.on(document, 'click', '.test-button', () => {
      this.emit('button-clicked');
    });
  }

  subscribeToState() {
    this.subscribeToStateCalled = true;
    this.subscribe('test.value', ({ newValue }) => {
      this.emit('value-changed', newValue);
    });
  }

  async cleanup() {
    this.cleanupCalled = true;
  }

  // Public test methods
  testSetInterval(callback: () => void, delay: number) {
    return this.setInterval(callback, delay);
  }

  testSetTimeout(callback: () => void, delay: number) {
    return this.setTimeout(callback, delay);
  }

  testShowNotification(type: any, message: string, duration?: number) {
    switch (type) {
      case 'success':
        this.showSuccess(message, duration);
        break;
      case 'error':
        this.showError(message, duration);
        break;
      case 'warning':
        this.showWarning(message, duration);
        break;
      case 'info':
        this.showInfo(message, duration);
        break;
    }
  }
}

describe('Module Base Class', () => {
  let module: TestModule;

  beforeEach(() => {
    // Clear events and state
    EventBus.clear();
    vi.clearAllMocks();
    
    // Create fresh module instance
    module = new TestModule('test');
  });

  afterEach(async () => {
    // Cleanup module if initialized
    if (module.isInitialized()) {
      await module.destroy();
    }
  });

  describe('Initialization', () => {
    it('should initialize module correctly', async () => {
      await module.init();
      
      expect(module.isInitialized()).toBe(true);
      expect(module.setupCalled).toBe(true);
      expect(module.bindEventsCalled).toBe(true);
      expect(module.subscribeToStateCalled).toBe(true);
    });

    it('should emit initialized event', async () => {
      const callback = vi.fn();
      EventBus.on('module:test:initialized', callback);
      
      await module.init();
      
      expect(callback).toHaveBeenCalled();
    });

    it('should prevent double initialization', async () => {
      await module.init();
      const consoleWarnSpy = vi.spyOn(console, 'warn');
      
      await module.init();
      
      expect(consoleWarnSpy).toHaveBeenCalledWith('Module test already initialized');
    });

    it('should handle initialization errors', async () => {
      class ErrorModule extends Module {
        async setup() {
          throw new Error('Setup failed');
        }
      }
      
      const errorModule = new ErrorModule('error');
      
      await expect(errorModule.init()).rejects.toThrow('Setup failed');
      expect(errorModule.isInitialized()).toBe(false);
    });
  });

  describe('State Management', () => {
    beforeEach(async () => {
      await module.init();
    });

    it('should get/set module state', () => {
      module.setModuleState({ value: 'test' });
      expect(module.getModuleState('value')).toBe('test');
    });

    it('should update module state partially', () => {
      module.setModuleState({ a: 1, b: 2 });
      module.updateModuleState({ b: 3, c: 4 });
      
      const state = module.getModuleState();
      expect(state).toEqual({ initialized: true, a: 1, b: 3, c: 4 });
    });

    it('should handle nested state paths', () => {
      module.setModuleState('nested.value', 'deep');
      expect(module.getModuleState('nested.value')).toBe('deep');
    });

    it('should return default values for missing state', () => {
      expect(module.getModuleState('missing', 'default')).toBe('default');
    });
  });

  describe('Event Management', () => {
    beforeEach(async () => {
      await module.init();
    });

    it('should emit module-scoped events', () => {
      const callback = vi.fn();
      EventBus.on('module:test:custom-event', callback);
      
      module.emit('custom-event', { data: 'test' });
      
      expect(callback).toHaveBeenCalledWith({ data: 'test' });
    });

    it('should emit global events', () => {
      const callback = vi.fn();
      EventBus.on('global-event', callback);
      
      module.emitGlobal('global-event', 'data');
      
      expect(callback).toHaveBeenCalledWith('data');
    });

    it('should listen to events', () => {
      const callback = vi.fn();
      module.listen('external:event', callback);
      
      EventBus.emit('external:event', 'data');
      
      expect(callback).toHaveBeenCalledWith('data');
    });

    it('should cleanup event listeners on destroy', async () => {
      const callback = vi.fn();
      module.listen('cleanup:test', callback);
      
      await module.destroy();
      
      EventBus.emit('cleanup:test', 'data');
      expect(callback).not.toHaveBeenCalled();
    });
  });

  describe('DOM Event Handling', () => {
    beforeEach(async () => {
      document.body.innerHTML = '<button class="test-button">Click me</button>';
      await module.init();
    });

    it('should bind DOM events with cleanup', async () => {
      const callback = vi.fn();
      EventBus.on('module:test:button-clicked', callback);
      
      const button = document.querySelector('.test-button') as HTMLElement;
      button.click();
      
      expect(callback).toHaveBeenCalled();
    });
  });

  describe('Timers Management', () => {
    beforeEach(async () => {
      vi.useFakeTimers();
      await module.init();
    });

    afterEach(() => {
      vi.useRealTimers();
    });

    it('should manage intervals with cleanup', async () => {
      const callback = vi.fn();
      module.testSetInterval(callback, 100);
      
      vi.advanceTimersByTime(250);
      expect(callback).toHaveBeenCalledTimes(2);
      
      await module.destroy();
      
      vi.advanceTimersByTime(200);
      expect(callback).toHaveBeenCalledTimes(2); // No more calls
    });

    it('should manage timeouts with cleanup', async () => {
      const callback = vi.fn();
      module.testSetTimeout(callback, 100);
      
      vi.advanceTimersByTime(50);
      expect(callback).not.toHaveBeenCalled();
      
      vi.advanceTimersByTime(60);
      expect(callback).toHaveBeenCalledTimes(1);
    });

    it('should cleanup timeouts on destroy', async () => {
      const callback = vi.fn();
      module.testSetTimeout(callback, 100);
      
      await module.destroy();
      
      vi.advanceTimersByTime(200);
      expect(callback).not.toHaveBeenCalled();
    });
  });

  describe('Notifications', () => {
    beforeEach(async () => {
      await module.init();
    });

    it('should show success notification', () => {
      const stateSpy = vi.spyOn(StateManager, 'set');
      module.testShowNotification('success', 'Success message', 1000);
      
      expect(stateSpy).toHaveBeenCalled();
      const call = stateSpy.mock.calls.find(c => c[0] === 'ui.notifications');
      expect(call).toBeDefined();
      
      const notifications = call![1] as any[];
      expect(notifications[0]).toMatchObject({
        type: 'success',
        message: 'Success message',
        duration: 1000
      });
    });

    it('should show error notification', () => {
      module.testShowNotification('error', 'Error message');
      
      const notifications = StateManager.get('ui.notifications', []) as any[];
      expect(notifications.some(n => n.type === 'error' && n.message === 'Error message')).toBe(true);
    });

    it('should auto-remove notifications after duration', async () => {
      vi.useFakeTimers();
      
      module.testShowNotification('info', 'Auto remove', 100);
      
      let notifications = StateManager.get('ui.notifications', []) as any[];
      expect(notifications).toHaveLength(1);
      
      vi.advanceTimersByTime(150);
      
      notifications = StateManager.get('ui.notifications', []) as any[];
      expect(notifications).toHaveLength(0);
      
      vi.useRealTimers();
    });
  });

  describe('Error Handling', () => {
    beforeEach(async () => {
      await module.init();
    });

    it('should handle errors properly', () => {
      const error = new Error('Test error');
      const eventCallback = vi.fn();
      
      EventBus.on('module:test:error', eventCallback);
      module.handleError(error);
      
      expect(eventCallback).toHaveBeenCalledWith(error);
      
      const errorState = StateManager.get('ui.error');
      expect(errorState).toMatchObject({
        message: 'Test error',
        details: error
      });
    });
  });

  describe('Lifecycle', () => {
    it('should reinitialize module', async () => {
      await module.init();
      expect(module.setupCalled).toBe(true);
      
      module.setupCalled = false;
      await module.reinit();
      
      expect(module.setupCalled).toBe(true);
      expect(module.isInitialized()).toBe(true);
    });

    it('should call cleanup on destroy', async () => {
      await module.init();
      await module.destroy();
      
      expect(module.cleanupCalled).toBe(true);
      expect(module.isInitialized()).toBe(false);
    });

    it('should emit destroyed event', async () => {
      await module.init();
      
      const callback = vi.fn();
      EventBus.on('module:test:destroyed', callback);
      
      await module.destroy();
      
      expect(callback).toHaveBeenCalled();
    });

    it('should handle multiple destroy calls', async () => {
      await module.init();
      await module.destroy();
      
      // Second destroy should not throw
      await expect(module.destroy()).resolves.not.toThrow();
    });
  });

  describe('Module without optional methods', () => {
    class MinimalModule extends Module {
      // No lifecycle methods implemented
    }

    it('should work without lifecycle methods', async () => {
      const minimal = new MinimalModule('minimal');
      
      await expect(minimal.init()).resolves.not.toThrow();
      expect(minimal.isInitialized()).toBe(true);
      
      await expect(minimal.destroy()).resolves.not.toThrow();
    });
  });

  describe('UI Helpers', () => {
    beforeEach(async () => {
      await module.init();
    });

    it('should set loading state', () => {
      module.setLoading(true);
      expect(StateManager.get('ui.loading')).toBe(true);
      
      module.setLoading(false);
      expect(StateManager.get('ui.loading')).toBe(false);
    });
  });
});